BN_add(3)                    OpenSSL                    BN_add(3)



NNAAMMEE
       BN_add, BN_sub, BN_mul, BN_div, BN_sqr, BN_mod,
       BN_mod_mul, BN_exp, BN_mod_exp, BN_gcd - arithmetic
       operations on BIGNUMs

SSYYNNOOPPSSIISS
        #include <openssl/bn.h>

        int BN_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);

        int BN_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);

        int BN_mul(BIGNUM *r, BIGNUM *a, BIGNUM *b, BN_CTX *ctx);

        int BN_div(BIGNUM *dv, BIGNUM *rem, const BIGNUM *a, const BIGNUM *d,
                BN_CTX *ctx);

        int BN_sqr(BIGNUM *r, BIGNUM *a, BN_CTX *ctx);

        int BN_mod(BIGNUM *rem, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);

        int BN_mod_mul(BIGNUM *ret, BIGNUM *a, BIGNUM *b, const BIGNUM *m,
                BN_CTX *ctx);

        int BN_exp(BIGNUM *r, BIGNUM *a, BIGNUM *p, BN_CTX *ctx);

        int BN_mod_exp(BIGNUM *r, BIGNUM *a, const BIGNUM *p,
                const BIGNUM *m, BN_CTX *ctx);

        int BN_gcd(BIGNUM *r, BIGNUM *a, BIGNUM *b, BN_CTX *ctx);


DDEESSCCRRIIPPTTIIOONN
       BN_add() adds aa and bb and places the result in rr (r=a+b).
       rr may be the same BBIIGGNNUUMM as aa or bb.

       BN_sub() subtracts bb from aa and places the result in rr
       (r=a-b).

       BN_mul() multiplies aa and bb and places the result in rr
       (r=a*b).  rr may be the same BBIIGGNNUUMM as aa or bb.  For
       multiplication by powers of 2, use BN_lshift(3).

       BN_div() divides aa by dd and places the result in ddvv and
       the remainder in rreemm (dv=a/d, rem=a%d). Either of ddvv and
       rreemm may be NULL, in which case the respective value is not
       returned.  For division by powers of 2, use BN_rshift(3).

       BN_sqr() takes the square of aa and places the result in rr
       (r=a^2). rr and aa may be the same BBIIGGNNUUMM.  This function is
       faster than BN_mul(r,a,a).

       BN_mod() find the remainder of aa divided by mm and places
       it in rreemm (rem=a%m).

       BN_mod_mul() multiplies aa by bb and finds the remainder
       when divided by mm (r=(a*b)%m). rr may be the same BBIIGGNNUUMM as
       aa or bb. For a more efficient algorithm, see
       BN_mod_mul_montgomery(3); for repeated computations using
       the same modulus, see BN_mod_mul_reciprocal(3).

       BN_exp() raises aa to the pp-th power and places the result
       in rr (r=a^p). This function is faster than repeated
       applications of BN_mul().

       BN_mod_exp() computes aa to the pp-th power modulo mm (r=a^p
       % m). This function uses less time and space than
       BN_exp().

       BN_gcd() computes the greatest common divisor of aa and bb
       and places the result in rr. rr may be the same BBIIGGNNUUMM as aa
       or bb.

       For all functions, ccttxx is a previously allocated BBNN_CCTTXX
       used for temporary variables; see BN_CTX_new(3).

       Unless noted otherwise, the result BBIIGGNNUUMM must be
       different from the arguments.

RREETTUURRNN VVAALLUUEESS
       For all functions, 1 is returned for success, 0 on error.
       The return value should always be checked (e.g., if
       (!BN_add(r,a,b)) goto err;).  The error codes can be
       obtained by ERR_get_error(3).

SSEEEE AALLSSOO
       bn(3), err(3), BN_CTX_new(3), BN_add_word(3),
       BN_set_bit(3)

HHIISSTTOORRYY
       BN_add(), BN_sub(), BN_div(), BN_sqr(), BN_mod(),
       BN_mod_mul(), BN_mod_exp() and BN_gcd() are available in
       all versions of SSLeay and OpenSSL. The ccttxx argument to
       BN_mul() was added in SSLeay 0.9.1b. BN_exp() appeared in
       SSLeay 0.9.0.











24/Feb/2000                   0.9.6c                    BN_add(3)
