RSA_set_method(3)            OpenSSL            RSA_set_method(3)



NNAAMMEE
       RSA_set_default_method, RSA_get_default_method,
       RSA_set_method, RSA_get_method, RSA_PKCS1_SSLeay,
       RSA_PKCS1_RSAref, RSA_null_method, RSA_flags,
       RSA_new_method - select RSA method

SSYYNNOOPPSSIISS
        #include <openssl/rsa.h>

        void RSA_set_default_method(RSA_METHOD *meth);

        RSA_METHOD *RSA_get_default_method(void);

        RSA_METHOD *RSA_set_method(RSA *rsa, RSA_METHOD *meth);

        RSA_METHOD *RSA_get_method(RSA *rsa);

        RSA_METHOD *RSA_PKCS1_SSLeay(void);

        RSA_METHOD *RSA_PKCS1_RSAref(void);

        RSA_METHOD *RSA_null_method(void);

        int RSA_flags(RSA *rsa);

        RSA *RSA_new_method(RSA_METHOD *method);


DDEESSCCRRIIPPTTIIOONN
       An RRSSAA_MMEETTHHOODD specifies the functions that OpenSSL uses
       for RSA operations. By modifying the method, alternative
       implementations such as hardware accelerators may be used.

       Initially, the default is to use the OpenSSL internal
       implementation, unless OpenSSL was configured with the
       rsaref or -DRSA_NULL options. RSA_PKCS1_SSLeay() returns a
       pointer to that method.

       RSA_PKCS1_RSAref() returns a pointer to a method that uses
       the RSAref library. This is the default method in the
       rsaref configuration; the function is not available in
       other configurations.  RSA_null_method() returns a pointer
       to a method that does not support the RSA transformation.
       It is the default if OpenSSL is compiled with -DRSA_NULL.
       These methods may be useful in the USA because of a patent
       on the RSA cryptosystem.

       RSA_set_default_method() makes mmeetthh the default method for
       all RRSSAA structures created later.

       RSA_get_default_method() returns a pointer to the current
       default method.

       RSA_set_method() selects mmeetthh for all operations using the
       key rrssaa.

       RSA_get_method() returns a pointer to the method currently
       selected for rrssaa.

       RSA_flags() returns the ffllaaggss that are set for rrssaa's
       current method.

       RSA_new_method() allocates and initializes an RRSSAA
       structure so that mmeetthhoodd will be used for the RSA
       operations. If mmeetthhoodd is NNUULLLL, the default method is used.

TTHHEE RRSSAA_MMEETTHHOODD SSTTRRUUCCTTUURREE
        typedef struct rsa_meth_st
        {
            /* name of the implementation */
               const char *name;

            /* encrypt */
               int (*rsa_pub_enc)(int flen, unsigned char *from,
                 unsigned char *to, RSA *rsa, int padding);

            /* verify arbitrary data */
               int (*rsa_pub_dec)(int flen, unsigned char *from,
                 unsigned char *to, RSA *rsa, int padding);

            /* sign arbitrary data */
               int (*rsa_priv_enc)(int flen, unsigned char *from,
                 unsigned char *to, RSA *rsa, int padding);

            /* decrypt */
               int (*rsa_priv_dec)(int flen, unsigned char *from,
                 unsigned char *to, RSA *rsa, int padding);

            /* compute r0 = r0 ^ I mod rsa->n (May be NULL for some
                                               implementations) */
               int (*rsa_mod_exp)(BIGNUM *r0, BIGNUM *I, RSA *rsa);

            /* compute r = a ^ p mod m (May be NULL for some implementations) */
               int (*bn_mod_exp)(BIGNUM *r, BIGNUM *a, const BIGNUM *p,
                 const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);

            /* called at RSA_new */
               int (*init)(RSA *rsa);

            /* called at RSA_free */
               int (*finish)(RSA *rsa);

            /* RSA_FLAG_EXT_PKEY        - rsa_mod_exp is called for private key
             *                            operations, even if p,q,dmp1,dmq1,iqmp
             *                            are NULL
             * RSA_FLAG_SIGN_VER        - enable rsa_sign and rsa_verify
             * RSA_METHOD_FLAG_NO_CHECK - don't check pub/private match
             */
               int flags;

               char *app_data; /* ?? */

            /* sign. For backward compatibility, this is used only
             * if (flags & RSA_FLAG_SIGN_VER)
             */
               int (*rsa_sign)(int type, unsigned char *m, unsigned int m_len,
                  unsigned char *sigret, unsigned int *siglen, RSA *rsa);

            /* verify. For backward compatibility, this is used only
             * if (flags & RSA_FLAG_SIGN_VER)
             */
               int (*rsa_verify)(int type, unsigned char *m, unsigned int m_len,
                  unsigned char *sigbuf, unsigned int siglen, RSA *rsa);

        } RSA_METHOD;


RREETTUURRNN VVAALLUUEESS
       RSA_PKCS1_SSLeay(), RSA_PKCS1_RSAref(),
       RSA_PKCS1_null_method(), RSA_get_default_method() and
       RSA_get_method() return pointers to the respective
       RRSSAA_MMEETTHHOODDs.

       RSA_set_default_method() returns no value.

       RSA_set_method() returns a pointer to the RRSSAA_MMEETTHHOODD
       previously associated with rrssaa.

       RSA_new_method() returns NNUULLLL and sets an error code that
       can be obtained by ERR_get_error(3) if the allocation
       fails. Otherwise it returns a pointer to the newly
       allocated structure.

SSEEEE AALLSSOO
       rsa(3), RSA_new(3)

HHIISSTTOORRYY
       RSA_new_method() and RSA_set_default_method() appeared in
       SSLeay 0.8.  RSA_get_default_method(), RSA_set_method()
       and RSA_get_method() as well as the rsa_sign and
       rsa_verify components of RSA_METHOD were added in OpenSSL
       0.9.4.

       RSA_null_method, RSA_flags, RSA_new_method - select RSA
       method"











14/Sep/2000                   0.9.6c            RSA_set_method(3)
