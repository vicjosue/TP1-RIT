EVP_SealInit(3)              OpenSSL              EVP_SealInit(3)



NNAAMMEE
       EVP_SealInit, EVP_SealUpdate, EVP_SealFinal - EVP envelope
       encryption

SSYYNNOOPPSSIISS
        #include <openssl/evp.h>

        int EVP_SealInit(EVP_CIPHER_CTX *ctx, EVP_CIPHER *type, unsigned char **ek,
                       int *ekl, unsigned char *iv,EVP_PKEY **pubk, int npubk);
        int EVP_SealUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,
                int *outl, unsigned char *in, int inl);
        int EVP_SealFinal(EVP_CIPHER_CTX *ctx, unsigned char *out,
                int *outl);


DDEESSCCRRIIPPTTIIOONN
       The EVP envelope routines are a high level interface to
       envelope encryption. They generate a random key and then
       "envelope" it by using public key encryption. Data can
       then be encrypted using this key.

       EVP_SealInit() initializes a cipher context ccttxx for
       encryption with cipher ttyyppee using a random secret key and
       IV supplied in the iivv parameter. ttyyppee is normally supplied
       by a function such as EVP_des_cbc(). The secret key is
       encrypted using one or more public keys, this allows the
       same encrypted data to be decrypted using any of the
       corresponding private keys. eekk is an array of buffers
       where the public key encrypted secret key will be written,
       each buffer must contain enough room for the corresponding
       encrypted key: that is eekk[[ii]] must have room for
       EEVVPP_PPKKEEYY_ssiizzee((ppuubbkk[[ii]])) bytes. The actual size of each
       encrypted secret key is written to the array eekkll. ppuubbkk is
       an array of nnppuubbkk public keys.

       EVP_SealUpdate() and EVP_SealFinal() have exactly the same
       properties as the EVP_EncryptUpdate() and
       EVP_EncryptFinal() routines, as documented on the
       EVP_EncryptInit(3) manual page.

RREETTUURRNN VVAALLUUEESS
       EVP_SealInit() returns 0 on error or nnppuubbkk if successful.

       EVP_SealUpdate() and EVP_SealFinal() return 1 for success
       and 0 for failure.

NNOOTTEESS
       Because a random secret key is generated the random number
       generator must be seeded before calling EVP_SealInit().

       The public key must be RSA because it is the only OpenSSL
       public key algorithm that supports key transport.

       Envelope encryption is the usual method of using public
       key encryption on large amounts of data, this is because
       public key encryption is slow but symmetric encryption is
       fast. So symmetric encryption is used for bulk encryption
       and the small random symmetric key used is transferred
       using public key encryption.

       It is possible to call EVP_SealInit() twice in the same
       way as EVP_EncryptInit(). The first call should have nnppuubbkk
       set to 0 and (after setting any cipher parameters) it
       should be called again with ttyyppee set to NULL.

SSEEEE AALLSSOO
       evp(3), rand(3), EVP_EncryptInit(3), EVP_OpenInit(3)

HHIISSTTOORRYY
23/Sep/2000                   0.9.6c              EVP_SealInit(3)
