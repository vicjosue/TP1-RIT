BN_mod_mul_reciprocal(3)     OpenSSL     BN_mod_mul_reciprocal(3)



NNAAMMEE
       BN_mod_mul_reciprocal,  BN_div_recp, BN_RECP_CTX_new,
       BN_RECP_CTX_init, BN_RECP_CTX_free, BN_RECP_CTX_set -
       modular multiplication using reciprocal

SSYYNNOOPPSSIISS
        #include <openssl/bn.h>

        BN_RECP_CTX *BN_RECP_CTX_new(void);
        void BN_RECP_CTX_init(BN_RECP_CTX *recp);
        void BN_RECP_CTX_free(BN_RECP_CTX *recp);

        int BN_RECP_CTX_set(BN_RECP_CTX *recp, const BIGNUM *m, BN_CTX *ctx);

        int BN_div_recp(BIGNUM *dv, BIGNUM *rem, BIGNUM *a, BN_RECP_CTX *recp,
               BN_CTX *ctx);

        int BN_mod_mul_reciprocal(BIGNUM *r, BIGNUM *a, BIGNUM *b,
               BN_RECP_CTX *recp, BN_CTX *ctx);


DDEESSCCRRIIPPTTIIOONN
       BN_mod_mul_reciprocal() can be used to perform an
       efficient BN_mod_mul(3) operation when the operation will
       be performed repeatedly with the same modulus. It computes
       rr=(aa*bb)%mm using rreeccpp=1/mm, which is set as described below.
       ccttxx is a previously allocated BBNN_CCTTXX used for temporary
       variables.

       BN_RECP_CTX_new() allocates and initializes a BBNN_RREECCPP
       structure.  BN_RECP_CTX_init() initializes an existing
       uninitialized BBNN_RREECCPP.

       BN_RECP_CTX_free() frees the components of the BBNN_RREECCPP,
       and, if it was created by BN_RECP_CTX_new(), also the
       structure itself.

       BN_RECP_CTX_set() stores mm in rreeccpp and sets it up for
       computing 1/mm and shifting it left by BN_num_bits(mm)+1 to
       make it an integer. The result and the number of bits it
       was shifted left will later be stored in rreeccpp.

       BN_div_recp() divides aa by mm using rreeccpp. It places the
       quotient in ddvv and the remainder in rreemm.

       The BBNN_RREECCPP_CCTTXX structure is defined as follows:

        typedef struct bn_recp_ctx_st
               {
               BIGNUM N;       /* the divisor */
               BIGNUM Nr;      /* the reciprocal */
               int num_bits;
               int shift;
               int flags;
               } BN_RECP_CTX;

       It cannot be shared between threads.

RREETTUURRNN VVAALLUUEESS
       BN_RECP_CTX_new() returns the newly allocated BBNN_RREECCPP_CCTTXX,
       and NULL on error.

       BN_RECP_CTX_init() and BN_RECP_CTX_free() have no return
       values.

       For the other functions, 1 is returned for success, 0 on
       error.  The error codes can be obtained by
       ERR_get_error(3).

SSEEEE AALLSSOO
       bn(3), err(3), BN_add(3), BN_CTX_new(3)

HHIISSTTOORRYY
       BBNN_RREECCPP_CCTTXX was added in SSLeay 0.9.0. Before that, the
       function BN_reciprocal() was used instead, and the
       BN_mod_mul_reciprocal() arguments were different.











14/Sep/2000                   0.9.6c     BN_mod_mul_reciprocal(3)
