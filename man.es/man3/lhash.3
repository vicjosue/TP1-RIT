lhash(3)                     OpenSSL                     lhash(3)



NNAAMMEE
       lh_new, lh_free, lh_insert, lh_delete, lh_retrieve,
       lh_doall, lh_doall_arg, lh_error - dynamic hash table

SSYYNNOOPPSSIISS
        #include <openssl/lhash.h>

        LHASH *lh_new(unsigned long (*hash)(/*void *a*/),
                 int (*compare)(/*void *a,void *b*/));
        void lh_free(LHASH *table);

        void *lh_insert(LHASH *table, void *data);
        void *lh_delete(LHASH *table, void *data);
        void *lh_retrieve(LHASH *table, void *data);

        void lh_doall(LHASH *table, void (*func)(/*void *b*/));
        void lh_doall_arg(LHASH *table, void (*func)(/*void *a,void *b*/),
                 void *arg);

        int lh_error(LHASH *table);


DDEESSCCRRIIPPTTIIOONN
       This library implements dynamic hash tables. The hash
       table entries can be arbitrary structures. Usually they
       consist of key and value fields.

       lh_new() creates a new LLHHAASSHH structure. hhaasshh takes a
       pointer to the structure and returns an unsigned long hash
       value of its key field. The hash value is normally
       truncated to a power of 2, so make sure that your hash
       function returns well mixed low order bits. ccoommppaarree takes
       two arguments, and returns 0 if their keys are equal, non-
       zero otherwise.

       lh_free() frees the LLHHAASSHH structure ttaabbllee. Allocated hash
       table entries will not be freed; consider using lh_doall()
       to deallocate any remaining entries in the hash table.

       lh_insert() inserts the structure pointed to by ddaattaa into
       ttaabbllee.  If there already is an entry with the same key,
       the old value is replaced. Note that lh_insert() stores
       pointers, the data are not copied.

       lh_delete() deletes an entry from ttaabbllee.

       lh_retrieve() looks up an entry in ttaabbllee. Normally, ddaattaa
       is a structure with the key field(s) set; the function
       will return a pointer to a fully populated structure.

       lh_doall() will, for every entry in the hash table, call
       ffuunncc with the data item as parameters.  This function can
       be quite useful when used as follows:
        void cleanup(STUFF *a)
         { STUFF_free(a); }
        lh_doall(hash,cleanup);
        lh_free(hash); This can be used to free all the entries.
       lh_free() then cleans up the 'buckets' that point to
       nothing. When doing this, be careful if you delete entries
       from the hash table in ffuunncc: the table may decrease in
       size, moving item that you are currently on down lower in
       the hash table.  This could cause some entries to be
       skipped.  The best solution to this problem is to set
       hash->down_load=0 before you start.  This will stop the
       hash table ever being decreased in size.

       lh_doall_arg() is the same as lh_doall() except that ffuunncc
       will be called with aarrgg as the second argument.

       lh_error() can be used to determine if an error occurred
       in the last operation. lh_error() is a macro.

RREETTUURRNN VVAALLUUEESS
       lh_new() returns NNUULLLL on error, otherwise a pointer to the
       new LLHHAASSHH structure.

       When a hash table entry is replaced, lh_insert() returns
       the value being replaced. NNUULLLL is returned on normal
       operation and on error.

       lh_delete() returns the entry being deleted.  NNUULLLL is
       returned if there is no such value in the hash table.

       lh_retrieve() returns the hash table entry if it has been
       found, NNUULLLL otherwise.

       lh_error() returns 1 if an error occurred in the last
       operation, 0 otherwise.

       lh_free(), lh_doall() and lh_doall_arg() return no values.

BBUUGGSS
       lh_insert() returns NNUULLLL both for success and error.

IINNTTEERRNNAALLSS
       The following description is based on the SSLeay
       documentation:

       The llhhaasshh library implements a hash table described in the
       Communications of the ACM in 1991.  What makes this hash
       table different is that as the table fills, the hash table
       is increased (or decreased) in size via OPENSSL_realloc().
       When a 'resize' is done, instead of all hashes being
       redistributed over twice as many 'buckets', one bucket is
       split.  So when an 'expand' is done, there is only a
       minimal cost to redistribute some values.  Subsequent
       inserts will cause more single 'bucket' redistributions
       but there will never be a sudden large cost due to
       redistributing all the 'buckets'.

       The state for a particular hash table is kept in the LLHHAASSHH
       structure.  The decision to increase or decrease the hash
       table size is made depending on the 'load' of the hash
       table.  The load is the number of items in the hash table
       divided by the size of the hash table.  The default values
       are as follows.  If (hash->up_load < load) => expand.  if
       (hash->down_load > load) => contract.  The uupp_llooaadd has a
       default value of 1 and ddoowwnn_llooaadd has a default value of 2.
       These numbers can be modified by the application by just
       playing with the uupp_llooaadd and ddoowwnn_llooaadd variables.  The
       'load' is kept in a form which is multiplied by 256.  So
       hash->up_load=8*256; will cause a load of 8 to be set.

       If you are interested in performance the field to watch is
       num_comp_calls.  The hash library keeps track of the
       'hash' value for each item so when a lookup is done, the
       'hashes' are compared, if there is a match, then a full
       compare is done, and hash->num_comp_calls is incremented.
       If num_comp_calls is not equal to num_delete plus
       num_retrieve it means that your hash function is
       generating hashes that are the same for different values.
       It is probably worth changing your hash function if this
       is the case because even if your hash table has 10 items
       in a 'bucket', it can be searched with 10 uunnssiiggnneedd lloonngg
       compares and 10 linked list traverses.  This will be much
       less expensive that 10 calls to you compare function.

       lh_strhash() is a demo string hashing function:

        unsigned long lh_strhash(const char *c);

       Since the LLHHAASSHH routines would normally be passed
       structures, this routine would not normally be passed to
       lh_new(), rather it would be used in the function passed
       to lh_new().

SSEEEE AALLSSOO
       lh_stats(3)

HHIISSTTOORRYY
       The llhhaasshh library is available in all versions of SSLeay
       and OpenSSL.  lh_error() was added in SSLeay 0.9.1b.

       This manpage is derived from the SSLeay documentation.













19/Sep/2000                   0.9.6c                     lhash(3)
