SSL_CTX_use_certificate(3)   OpenSSL   SSL_CTX_use_certificate(3)



NNAAMMEE
       SSL_CTX_use_certificate, SSL_CTX_use_certificate_ASN1,
       SSL_CTX_use_certificate_file, SSL_use_certificate,
       SSL_use_certificate_ASN1, SSL_use_certificate_file,
       SSL_CTX_use_certificate_chain_file,
       SSL_CTX_use_PrivateKey, SSL_CTX_use_PrivateKey_ASN1,
       SSL_CTX_use_PrivateKey_file, SSL_CTX_use_RSAPrivateKey,
       SSL_CTX_use_RSAPrivateKey_ASN1,
       SSL_CTX_use_RSAPrivateKey_file, SSL_use_PrivateKey_file,
       SSL_use_PrivateKey_ASN1, SSL_use_PrivateKey,
       SSL_use_RSAPrivateKey, SSL_use_RSAPrivateKey_ASN1,
       SSL_use_RSAPrivateKey_file, SSL_CTX_check_private_key,
       SSL_check_private_key - load certificate and key data

SSYYNNOOPPSSIISS
        #include <openssl/ssl.h>

        int SSL_CTX_use_certificate(SSL_CTX *ctx, X509 *x);
        int SSL_CTX_use_certificate_ASN1(SSL_CTX *ctx, int len, unsigned char *d);
        int SSL_CTX_use_certificate_file(SSL_CTX *ctx, const char *file, int type);
        int SSL_use_certificate(SSL *ssl, X509 *x);
        int SSL_use_certificate_ASN1(SSL *ssl, unsigned char *d, int len);
        int SSL_use_certificate_file(SSL *ssl, const char *file, int type);

        int SSL_CTX_use_certificate_chain_file(SSL_CTX *ctx, const char *file);

        int SSL_CTX_use_PrivateKey(SSL_CTX *ctx, EVP_PKEY *pkey);
        int SSL_CTX_use_PrivateKey_ASN1(int pk, SSL_CTX *ctx, unsigned char *d,
                                        long len);
        int SSL_CTX_use_PrivateKey_file(SSL_CTX *ctx, const char *file, int type);
        int SSL_CTX_use_RSAPrivateKey(SSL_CTX *ctx, RSA *rsa);
        int SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX *ctx, unsigned char *d, long len);
        int SSL_CTX_use_RSAPrivateKey_file(SSL_CTX *ctx, const char *file, int type);
        int SSL_use_PrivateKey(SSL *ssl, EVP_PKEY *pkey);
        int SSL_use_PrivateKey_ASN1(int pk,SSL *ssl, unsigned char *d, long len);
        int SSL_use_PrivateKey_file(SSL *ssl, const char *file, int type);
        int SSL_use_RSAPrivateKey(SSL *ssl, RSA *rsa);
        int SSL_use_RSAPrivateKey_ASN1(SSL *ssl, unsigned char *d, long len);
        int SSL_use_RSAPrivateKey_file(SSL *ssl, const char *file, int type);

        int SSL_CTX_check_private_key(SSL_CTX *ctx);
        int SSL_check_private_key(SSL *ssl);


DDEESSCCRRIIPPTTIIOONN
       These functions load the certificates and private keys
       into the SSL_CTX or SSL object, respectively.

       The SSL_CTX_* class of functions loads the certificates
       and keys into the SSL_CTX object ccttxx. The information is
       passed to SSL objects ssssll created from ccttxx with SSL_new(3)
       by copying, so that changes applied to ccttxx do not
       propagate to already existing SSL objects.

       The SSL_* class of functions only loads certificates and
       keys into a specific SSL object. The specific information
       is kept, when SSL_clear(3) is called for this SSL object.

       SSL_CTX_use_certificate() loads the certificate xx into
       ccttxx, SSL_use_certificate() loads xx into ssssll. The rest of
       the certificates needed to form the complete certificate
       chain can be specified using the
       SSL_CTX_add_extra_chain_cert(3) function.

       SSL_CTX_use_certificate_ASN1() loads the ASN1 encoded
       certificate from the memory location dd (with length lleenn)
       into ccttxx, SSL_use_certificate_ASN1() loads the ASN1
       encoded certificate into ssssll.

       SSL_CTX_use_certificate_file() loads the first certificate
       stored in ffiillee into ccttxx. The formatting ttyyppee of the
       certificate must be specified from the known types
       SSL_FILETYPE_PEM, SSL_FILETYPE_ASN1.
       SSL_use_certificate_file() loads the certificate from ffiillee
       into ssssll.  See the NOTES section on why
       SSL_CTX_use_certificate_chain_file() should be preferred.

       SSL_CTX_use_certificate_chain_file() loads a certificate
       chain from ffiillee into ccttxx. The certificates must be in PEM
       format and must be sorted starting with the certificate to
       the highest level (root CA).  There is no corresponding
       function working on a single SSL object.

       SSL_CTX_use_PrivateKey() adds ppkkeeyy as private key to ccttxx.
       SSL_CTX_use_RSAPrivateKey() adds the private key rrssaa of
       type RSA to ccttxx. SSL_use_PrivateKey() adds ppkkeeyy as private
       key to ssssll; SSL_use_RSAPrivateKey() adds rrssaa as private
       key of type RSA to ssssll.

       SSL_CTX_use_PrivateKey_ASN1() adds the private key of type
       ppkk stored at memory location dd (length lleenn) to ccttxx.
       SSL_CTX_use_RSAPrivateKey_ASN1() adds the private key of
       type RSA stored at memory location dd (length lleenn) to ccttxx.
       SSL_use_PrivateKey_ASN1() and SSL_use_RSAPrivateKey_ASN1()
       add the private key to ssssll.

       SSL_CTX_use_PrivateKey_file() adds the first private key
       found in ffiillee to ccttxx. The formatting ttyyppee of the
       certificate must be specified from the known types
       SSL_FILETYPE_PEM, SSL_FILETYPE_ASN1.
       SSL_CTX_use_RSAPrivateKey_file() adds the first private
       RSA key found in ffiillee to ccttxx. SSL_use_PrivateKey_file()
       adds the first private key found in ffiillee to ssssll;
       SSL_use_RSAPrivateKey_file() adds the first private RSA
       key found to ssssll.

       SSL_CTX_check_private_key() checks the consistency of a
       private key with the corresponding certificate loaded into
       ccttxx. If more than one key/certificate pair (RSA/DSA) is
       installed, the last item installed will be checked. If
       e.g. the last item was a RSA certificate or key, the RSA
       key/certificate pair will be checked.
       SSL_check_private_key() performs the same check for ssssll.
       If no key/certificate was explicitly added for this ssssll,
       the last item added into ccttxx will be checked.

NNOOTTEESS    TThhee iinntteerrnnaall cceerrttiiffiiccaattee ssttoorree ooff OOppeennSSSSLL ccaann hhoolldd ttwwoo
       pprriivvaattee kkeeyy//cceerrttiiffiiccaattee ppaaiirrss aatt aa ttiimmee:: oonnee
       kkeeyy//cceerrttiiffiiccaattee ooff ttyyppee RRSSAA aanndd oonnee kkeeyy//cceerrttiiffiiccaattee ooff
       ttyyppee DDSSAA.. TThhee cceerrttiiffiiccaattee uusseedd ddeeppeennddss oonn tthhee cciipphheerr
       sseelleecctt,, sseeee aallssoo SSSSLL_CCTTXX_sseett_cciipphheerr_lliisstt((33))..
       When reading certificates and private keys from file,
       files of type SSL_FILETYPE_ASN1 (also known as DDEERR, binary
       encoding) can only contain one certificate or private key,
       consequently SSL_CTX_use_certificate_chain_file() is only
       applicable to PEM formatting.  Files of type
       SSL_FILETYPE_PEM can contain more than one item.

       SSL_CTX_use_certificate_chain_file() adds the first
       certificate found in the file to the certificate store.
       The other certificates are added to the store of chain
       certificates using SSL_CTX_add_extra_chain_cert(3).  There
       exists only one extra chain store, so that the same chain
       is appended to both types of certificates, RSA and DSA! If
       it is not intended to use both type of certificate at the
       same time, it is recommended to use the
       SSL_CTX_use_certificate_chain_file() instead of the
       SSL_CTX_use_certificate_file() function in order to allow
       the use of complete certificate chains even when no
       trusted CA storage is used or when the CA issuing the
       certificate shall not be added to the trusted CA storage.

       If additional certificates are needed to complete the
       chain during the TLS negotiation, CA certificates are
       additionally looked up in the locations of trusted CA
       certificates, see SSL_CTX_load_verify_locations(3).

       The private keys loaded from file can be encrypted. In
       order to successfully load encrypted keys, a function
       returning the passphrase must have been supplied, see
       SSL_CTX_set_default_passwd_cb(3).  (Certificate files
       might be encrypted as well from the technical point of
       view, it however does not make sense as the data in the
       certificate is considered public anyway.)

RREETTUURRNN VVAALLUUEESS
       On success, the functions return 1.  Otherwise check out
       the error stack to find out the reason.

SSEEEE AALLSSOO
       ssl(3), SSL_new(3), SSL_clear(3),
       SSL_CTX_load_verify_locations(3),
       SSL_CTX_set_default_passwd_cb(3),
       SSL_CTX_set_cipher_list(3),
       SSL_CTX_add_extra_chain_cert(3)











15/Feb/2001                   0.9.6c   SSL_CTX_use_certificate(3)
