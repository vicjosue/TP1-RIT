BN_bn2bin(3)                 OpenSSL                 BN_bn2bin(3)



NNAAMMEE
       BN_bn2bin, BN_bin2bn, BN_bn2hex, BN_bn2dec, BN_hex2bn,
       BN_dec2bn, BN_print, BN_print_fp, BN_bn2mpi, BN_mpi2bn -
       format conversions

SSYYNNOOPPSSIISS
        #include <openssl/bn.h>

        int BN_bn2bin(const BIGNUM *a, unsigned char *to);
        BIGNUM *BN_bin2bn(const unsigned char *s, int len, BIGNUM *ret);

        char *BN_bn2hex(const BIGNUM *a);
        char *BN_bn2dec(const BIGNUM *a);
        int BN_hex2bn(BIGNUM **a, const char *str);
        int BN_dec2bn(BIGNUM **a, const char *str);

        int BN_print(BIO *fp, const BIGNUM *a);
        int BN_print_fp(FILE *fp, const BIGNUM *a);

        int BN_bn2mpi(const BIGNUM *a, unsigned char *to);
        BIGNUM *BN_mpi2bn(unsigned char *s, int len, BIGNUM *ret);


DDEESSCCRRIIPPTTIIOONN
       BN_bn2bin() converts the absolute value of aa into big-
       endian form and stores it at ttoo. ttoo must point to
       BN_num_bytes(aa) bytes of memory.

       BN_bin2bn() converts the positive integer in big-endian
       form of length lleenn at ss into a BBIIGGNNUUMM and places it in
       rreett. If rreett is NULL, a new BBIIGGNNUUMM is created.

       BN_bn2hex() and BN_bn2dec() return printable strings
       containing the hexadecimal and decimal encoding of aa
       respectively. For negative numbers, the string is prefaced
       with a leading '-'. The string must be freed later using
       OPENSSL_free().

       BN_hex2bn() converts the string ssttrr containing a
       hexadecimal number to a BBIIGGNNUUMM and stores it in **bbnn. If
       *bbnn is NULL, a new BBIIGGNNUUMM is created. If bbnn is NULL, it
       only computes the number's length in hexadecimal digits.
       If the string starts with '-', the number is negative.
       BN_dec2bn() is the same using the decimal system.

       BN_print() and BN_print_fp() write the hexadecimal
       encoding of aa, with a leading '-' for negative numbers, to
       the BBIIOO or FFIILLEE ffpp.

       BN_bn2mpi() and BN_mpi2bn() convert BBIIGGNNUUMMs from and to a
       format that consists of the number's length in bytes
       represented as a 3-byte big-endian number, and the number
       itself in big-endian format, where the most significant
       bit signals a negative number (the representation of
       numbers with the MSB set is prefixed with null byte).

       BN_bn2mpi() stores the representation of aa at ttoo, where ttoo
       must be large enough to hold the result. The size can be
       determined by calling BN_bn2mpi(aa, NULL).

       BN_mpi2bn() converts the lleenn bytes long representation at
       ss to a BBIIGGNNUUMM and stores it at rreett, or in a newly
       allocated BBIIGGNNUUMM if rreett is NULL.

RREETTUURRNN VVAALLUUEESS
       BN_bn2bin() returns the length of the big-endian number
       placed at ttoo.  BN_bin2bn() returns the BBIIGGNNUUMM, NULL on
       error.

       BN_bn2hex() and BN_bn2dec() return a null-terminated
       string, or NULL on error. BN_hex2bn() and BN_dec2bn()
       return the number's length in hexadecimal or decimal
       digits, and 0 on error.

       BN_print_fp() and BN_print() return 1 on success, 0 on
       write errors.

       BN_bn2mpi() returns the length of the representation.
       BN_mpi2bn() returns the BBIIGGNNUUMM, and NULL on error.

       The error codes can be obtained by ERR_get_error(3).

SSEEEE AALLSSOO
       bn(3), err(3), BN_zero(3), ASN1_INTEGER_to_BN(3),
       BN_num_bytes(3)

HHIISSTTOORRYY
       BN_bn2bin(), BN_bin2bn(), BN_print_fp() and BN_print() are
       available in all versions of SSLeay and OpenSSL.

       BN_bn2hex(), BN_bn2dec(), BN_hex2bn(), BN_dec2bn(),
       BN_bn2mpi() and BN_mpi2bn() were added in SSLeay 0.9.0.











19/Sep/2000                   0.9.6c                 BN_bn2bin(3)
