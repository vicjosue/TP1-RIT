SSL_CTX_set_verify(3)        OpenSSL        SSL_CTX_set_verify(3)



NNAAMMEE
       SSL_CTX_set_verify, SSL_set_verify,
       SSL_CTX_set_verify_depth, SSL_set_verify_depth - set peer
       certificate verification parameters

SSYYNNOOPPSSIISS
        #include <openssl/ssl.h>

        void SSL_CTX_set_verify(SSL_CTX *ctx, int mode,
                                int (*verify_callback)(int, X509_STORE_CTX *));
        void SSL_set_verify(SSL *s, int mode,
                            int (*verify_callback)(int, X509_STORE_CTX *));
        void SSL_CTX_set_verify_depth(SSL_CTX *ctx,int depth);
        void SSL_set_verify_depth(SSL *s, int depth);

        int verify_callback(int preverify_ok, X509_STORE_CTX *x509_ctx);


DDEESSCCRRIIPPTTIIOONN
       SSL_CTX_set_verify() sets the verification flags for ccttxx
       to be mmooddee and specifies the vveerriiffyy_ccaallllbbaacckk function to
       be used. If no callback function shall be specified, the
       NULL pointer can be used for vveerriiffyy_ccaallllbbaacckk.

       SSL_set_verify() sets the verification flags for ssssll to be
       mmooddee and specifies the vveerriiffyy_ccaallllbbaacckk function to be
       used. If no callback function shall be specified, the NULL
       pointer can be used for vveerriiffyy_ccaallllbbaacckk. In this case last
       vveerriiffyy_ccaallllbbaacckk set specifically for this ssssll remains. If
       no special ccaallllbbaacckk was set before, the default callback
       for the underlying ccttxx is used, that was valid at the the
       time ssssll was created with SSL_new(3).

       SSL_CTX_set_verify_depth() sets the maximum ddeepptthh for the
       certificate chain verification that shall be allowed for
       ccttxx. (See the BUGS section.)

       SSL_set_verify_depth() sets the maximum ddeepptthh for the
       certificate chain verification that shall be allowed for
       ssssll. (See the BUGS section.)

NNOOTTEESS
       The verification of certificates can be controlled by a
       set of logically or'ed mmooddee flags:

       SSL_VERIFY_NONE
           SSeerrvveerr mmooddee:: the server will not send a client
           certificate request to the client, so the client will
           not send a certificate.

           CClliieenntt mmooddee:: if not using an anonymous cipher (by
           default disabled), the server will send a certificate
           which will be checked. The result of the certificate
           verification process can be checked after the TLS/SSL
           handshake using the SSL_get_verify_result(3) function.
           The handshake will be continued regardless of the
           verification result.

       SSL_VERIFY_PEER
           SSeerrvveerr mmooddee:: the server sends a client certificate
           request to the client.  The certificate returned (if
           any) is checked. If the verification process fails,
           the TLS/SSL handshake is immediately terminated with
           an alert message containing the reason for the
           verification failure.  The behaviour can be controlled
           by the additional SSL_VERIFY_FAIL_IF_NO_PEER_CERT and
           SSL_VERIFY_CLIENT_ONCE flags.

           CClliieenntt mmooddee:: the server certificate is verified. If
           the verification process fails, the TLS/SSL handshake
           is immediately terminated with an alert message
           containing the reason for the verification failure. If
           no server certificate is sent, because an anonymous
           cipher is used, SSL_VERIFY_PEER is ignored.

       SSL_VERIFY_FAIL_IF_NO_PEER_CERT
           SSeerrvveerr mmooddee:: if the client did not return a
           certificate, the TLS/SSL handshake is immediately
           terminated with a "handshake failure" alert.  This
           flag must be used together with SSL_VERIFY_PEER.

           CClliieenntt mmooddee:: ignored

       SSL_VERIFY_CLIENT_ONCE
           SSeerrvveerr mmooddee:: only request a client certificate on the
           initial TLS/SSL handshake. Do not ask for a client
           certificate again in case of a renegotiation. This
           flag must be used together with SSL_VERIFY_PEER.

           CClliieenntt mmooddee:: ignored

       Exactly one of the mmooddee flags SSL_VERIFY_NONE and
       SSL_VERIFY_PEER must be set at any time.

       The actual verification procedure is performed either
       using the built-in verification procedure or using another
       application provided verification function set with
       SSL_CTX_set_cert_verify_callback(3).  The following
       descriptions apply in the case of the built-in procedure.
       An application provided procedure also has access to the
       verify depth information and the verify_callback()
       function, but the way this information is used may be
       different.

       SSL_CTX_set_verify_depth() and SSL_set_verify_depth() set
       the limit up to which depth certificates in a chain are
       used during the verification procedure. If the certificate
       chain is longer than allowed, the certificates above the
       limit are ignored. Error messages are generated as if
       these certificates would not be present, most likely a
       X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY will be
       issued.  The depth count is "level 0:peer certificate",
       "level 1: CA certificate", "level 2: higher level CA
       certificate", and so on. Setting the maximum depth to 2
       allows the levels 0, 1, and 2. The default depth limit is
       9, allowing for the peer certificate and additional 9 CA
       certificates.

       The vveerriiffyy_ccaallllbbaacckk function is used to control the
       behaviour when the SSL_VERIFY_PEER flag is set. It must be
       supplied by the application and receives two arguments:
       pprreevveerriiffyy_ookk indicates, whether the verification of the
       certificate in question was passed (preverify_ok=1) or not
       (preverify_ok=0). xx550099_ccttxx is a pointer to the complete
       context used for the certificate chain verification.

       The certificate chain is checked starting with the deepest
       nesting level (the root CA certificate) and worked upward
       to the peer's certificate.  At each level signatures and
       issuer attributes are checked. Whenever a verification
       error is found, the error number is stored in xx550099_ccttxx and
       vveerriiffyy_ccaallllbbaacckk is called with pprreevveerriiffyy_ookk=0. By applying
       X509_CTX_store_* functions vveerriiffyy_ccaallllbbaacckk can locate the
       certificate in question and perform additional steps (see
       EXAMPLES). If no error is found for a certificate,
       vveerriiffyy_ccaallllbbaacckk is called with pprreevveerriiffyy_ookk=1 before
       advancing to the next level.

       The return value of vveerriiffyy_ccaallllbbaacckk controls the strategy
       of the further verification process. If vveerriiffyy_ccaallllbbaacckk
       returns 0, the verification process is immediately stopped
       with "verification failed" state. If SSL_VERIFY_PEER is
       set, a verification failure alert is sent to the peer and
       the TLS/SSL handshake is terminated. If vveerriiffyy_ccaallllbbaacckk
       returns 1, the verification process is continued. If
       vveerriiffyy_ccaallllbbaacckk always returns 1, the TLS/SSL handshake
       will never be terminated because of this application
       experiencing a verification failure. The calling process
       can however retrieve the error code of the last
       verification error using SSL_get_verify_result(3) or by
       maintaining its own error storage managed by
       vveerriiffyy_ccaallllbbaacckk.

       If no vveerriiffyy_ccaallllbbaacckk is specified, the default callback
       will be used.  Its return value is identical to
       pprreevveerriiffyy_ookk, so that any verification failure will lead
       to a termination of the TLS/SSL handshake with an alert
       message, if SSL_VERIFY_PEER is set.

BBUUGGSS
       In client mode, it is not checked whether the
       SSL_VERIFY_PEER flag is set, but whether SSL_VERIFY_NONE
       is not set. This can lead to unexpected behaviour, if the
       SSL_VERIFY_PEER and SSL_VERIFY_NONE are not used as
       required (exactly one must be set at any time).

       The certificate verification depth set with
       SSL[_CTX]_verify_depth() stops the verification at a
       certain depth. The error message produced will be that of
       an incomplete certificate chain and not
       X509_V_ERR_CERT_CHAIN_TOO_LONG as may be expected.

RREETTUURRNN VVAALLUUEESS
       The SSL*_set_verify*() functions do not provide diagnostic
       information.

EEXXAAMMPPLLEESS
       The following code sequence realizes an example
       vveerriiffyy_ccaallllbbaacckk function that will always continue the
       TLS/SSL handshake regardless of verification failure, if
       wished. The callback realizes a verification depth limit
       with more informational output.

       All verification errors are printed, informations about
       the certificate chain are printed on request.  The example
       is realized for a server that does allow but not require
       client certificates.

       The example makes use of the ex_data technique to store
       application data into/retrieve application data from the
       SSL structure (see SSL_get_ex_new_index(3),
       SSL_get_ex_data_X509_STORE_CTX_idx(3)).


        ...
        typedef struct {
          int verbose_mode;
          int verify_depth;
          int always_continue;
        } mydata_t;
        int mydata_index;
        ...
        static int verify_callback(int preverify_ok, X509_STORE_CTX *ctx)
        {
           char    buf[256];
           X509   *err_cert;
           int     err, depth;
           SSL    *ssl;
           mydata_t *mydata;

           err_cert = X509_STORE_CTX_get_current_cert(ctx);
           err = X509_STORE_CTX_get_error(ctx);
           depth = X509_STORE_CTX_get_error_depth(ctx);

           /*
            * Retrieve the pointer to the SSL of the connection currently treated
            * and the application specific data stored into the SSL object.
            */
           ssl = X509_STORE_CTX_get_ex_data(ctx, SSL_get_ex_data_X509_STORE_CTX_idx());
           mydata = SSL_get_ex_data(ssl, mydata_index);

           X509_NAME_oneline(X509_get_subject_name(err_cert), buf, 256);

           /*
            * Catch a too long certificate chain. The depth limit set using
            * SSL_CTX_set_verify_depth() is by purpose set to "limit+1" so
            * that whenever the "depth>verify_depth" condition is met, we
            * have violated the limit and want to log this error condition.
            * We must do it here, because the CHAIN_TOO_LONG error would not
            * be found explicitly; only errors introduced by cutting off the
            * additional certificates would be logged.
            */
           if (depth > mydata->verify_depth) {
               preverify_ok = 0;
               err = X509_V_ERR_CERT_CHAIN_TOO_LONG;
               X509_STORE_CTX_set_error(ctx, err);
           }
           if (!preverify_ok) {
               printf("verify error:num=%d:%s:depth=%d:%s\n", err,
                        X509_verify_cert_error_string(err), depth, buf);
           }
           else if (mydata->verbose_mode)
           {
               printf("depth=%d:%s\n", depth, buf);
           }

           /*
            * At this point, err contains the last verification error. We can use
            * it for something special
            */
           if (!preverify_ok && (err == X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT)
           {
             X509_NAME_oneline(X509_get_issuer_name(ctx->current_cert), buf, 256);
             printf("issuer= %s\n", buf);
           }





           if (mydata->always_continue)
             return 1;
           else
             return preverify_ok;
        }
        ...

        mydata_t mydata;

        ...
        mydata_index = SSL_get_ex_new_index(0, "mydata index", NULL, NULL, NULL);

        ...
        SSL_CTX_set_verify(ctx, SSL_VERIFY_PEER|SSL_VERIFY_CLIENT_ONCE,
                           verify_callback);

        /*
         * Let the verify_callback catch the verify_depth error so that we get
         * an appropriate error in the logfile.
         */
        SSL_CTX_set_verify_depth(verify_depth + 1);

        /*
         * Set up the SSL specific data into "mydata" and store it into th SSL
         * structure.
         */
        mydata.verify_depth = verify_depth; ...
        SSL_set_ex_data(ssl, mydata_index, &mydata);

        ...
        SSL_accept(ssl);       /* check of success left out for clarity */
        if (peer = SSL_get_peer_certificate(ssl))
        {
          if (SSL_get_verify_result(ssl) == X509_V_OK)
          {
            /* The client sent a certificate which verified OK */
          }
        }


SSEEEE AALLSSOO
       ssl(3), SSL_new(3), SSL_CTX_get_verify_mode(3),
       SSL_get_verify_result(3),
       SSL_CTX_load_verify_locations(3),
       SSL_get_peer_certificate(3),
       SSL_CTX_set_cert_verify_callback(3),
       SSL_get_ex_data_X509_STORE_CTX_idx(3),
       SSL_get_ex_new_index(3)

















23/Aug/2001                   0.9.6c        SSL_CTX_set_verify(3)
