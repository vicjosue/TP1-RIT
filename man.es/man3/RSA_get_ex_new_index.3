RSA_get_ex_new_index(3)      OpenSSL      RSA_get_ex_new_index(3)



NNAAMMEE
       RSA_get_ex_new_index, RSA_set_ex_data, RSA_get_ex_data -
       add application specific data to RSA structures

SSYYNNOOPPSSIISS
        #include <openssl/rsa.h>

        int RSA_get_ex_new_index(long argl, void *argp,
                       CRYPTO_EX_new *new_func,
                       CRYPTO_EX_dup *dup_func,
                       CRYPTO_EX_free *free_func);

        int RSA_set_ex_data(RSA *r, int idx, void *arg);

        void *RSA_get_ex_data(RSA *r, int idx);

        typedef int new_func(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
                       int idx, long argl, void *argp);
        typedef void free_func(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
                       int idx, long argl, void *argp);
        typedef int dup_func(CRYPTO_EX_DATA *to, CRYPTO_EX_DATA *from, void *from_d,
                       int idx, long argl, void *argp);


DDEESSCCRRIIPPTTIIOONN
       Several OpenSSL structures can have application specific
       data attached to them.  This has several potential uses,
       it can be used to cache data associated with a structure
       (for example the hash of some part of the structure) or
       some additional data (for example a handle to the data in
       an external library).

       Since the application data can be anything at all it is
       passed and retrieved as a vvooiidd ** type.

       The RRSSAA_ggeett_eexx_nneeww_iinnddeexx(()) function is initially called to
       "register" some new application specific data. It takes
       three optional function pointers which are called when the
       parent structure (in this case an RSA structure) is
       initially created, when it is copied and when it is freed
       up. If any or all of these function pointer arguments are
       not used they should be set to NULL. The precise manner in
       which these function pointers are called is described in
       more detail below. RRSSAA_ggeett_eexx_nneeww_iinnddeexx(()) also takes
       additional long and pointer parameters which will be
       passed to the supplied functions but which otherwise have
       no special meaning. It returns an iinnddeexx which should be
       stored (typically in a static variable) and passed used in
       the iiddxx parameter in the remaining functions. Each
       successful call to RRSSAA_ggeett_eexx_nneeww_iinnddeexx(()) will return an
       index greater than any previously returned, this is
       important because the optional functions are called in
       order of increasing index value.

       RRSSAA_sseett_eexx_ddaattaa(()) is used to set application specific
       data, the data is supplied in the aarrgg parameter and its
       precise meaning is up to the application.

       RRSSAA_ggeett_eexx_ddaattaa(()) is used to retrieve application specific
       data. The data is returned to the application, this will
       be the same value as supplied to a previous
       RRSSAA_sseett_eexx_ddaattaa(()) call.

       nneeww_ffuunncc(()) is called when a structure is initially
       allocated (for example with RRSSAA_nneeww(()). The parent
       structure members will not have any meaningful values at
       this point. This function will typically be used to
       allocate any application specific structure.

       ffrreeee_ffuunncc(()) is called when a structure is being freed up.
       The dynamic parent structure members should not be
       accessed because they will be freed up when this function
       is called.

       nneeww_ffuunncc(()) and ffrreeee_ffuunncc(()) take the same parameters.
       ppaarreenntt is a pointer to the parent RSA structure. ppttrr is a
       the application specific data (this wont be of much use in
       nneeww_ffuunncc(()). aadd is a pointer to the CCRRYYPPTTOO_EEXX_DDAATTAA
       structure from the parent RSA structure: the functions
       CCRRYYPPTTOO_ggeett_eexx_ddaattaa(()) and CCRRYYPPTTOO_sseett_eexx_ddaattaa(()) can be
       called to manipulate it. The iiddxx parameter is the index:
       this will be the same value returned by
       RRSSAA_ggeett_eexx_nneeww_iinnddeexx(()) when the functions were initially
       registered. Finally the aarrggll and aarrggpp parameters are the
       values originally passed to the same corresponding
       parameters when RRSSAA_ggeett_eexx_nneeww_iinnddeexx(()) was called.

       dduupp_ffuunncc(()) is called when a structure is being copied.
       Pointers to the destination and source CCRRYYPPTTOO_EEXX_DDAATTAA
       structures are passed in the ttoo and ffrroomm parameters
       respectively. The ffrroomm_dd parameter is passed a pointer to
       the source application data when the function is called,
       when the function returns the value is copied to the
       destination: the application can thus modify the data
       pointed to by ffrroomm_dd and have different values in the
       source and destination.  The iiddxx, aarrggll and aarrggpp parameters
       are the same as those in nneeww_ffuunncc(()) and ffrreeee_ffuunncc(()).

RREETTUURRNN VVAALLUUEESS
       RRSSAA_ggeett_eexx_nneeww_iinnddeexx(()) returns a new index or -1 on
       failure (note 0 is a valid index value).

       RRSSAA_sseett_eexx_ddaattaa(()) returns 1 on success or 0 on failure.

       RRSSAA_ggeett_eexx_ddaattaa(()) returns the application data or 0 on
       failure. 0 may also be valid application data but
       currently it can only fail if given an invalid iiddxx
       parameter.

       nneeww_ffuunncc(()) and dduupp_ffuunncc(()) should return 0 for failure and
       1 for success.

       On failure an error code can be obtained from
       ERR_get_error(3).

BBUUGGSS
       dduupp_ffuunncc(()) is currently never called.

       The return value of nneeww_ffuunncc(()) is ignored.

       The nneeww_ffuunncc(()) function isn't very useful because no
       meaningful values are present in the parent RSA structure
       when it is called.

SSEEEE AALLSSOO
       rsa(3), CRYPTO_set_ex_data(3)

HHIISSTTOORRYY
       RSA_get_ex_new_index(), RSA_set_ex_data() and
       RSA_get_ex_data() are available since SSLeay 0.9.0.












14/Sep/2000                   0.9.6c      RSA_get_ex_new_index(3)
