SYSTEM(3)        Manual del Programador de Linux        SYSTEM(3)



NOMBRE
       system  -  ejecuta  una  orden  del intérprete de comandos
       (shell)

SINOPSIS
       #include <stdlib.h>

       int system (const char * mandato);

DESCRIPCIÓN
       system() ejecuta una orden especificada  en  mandato  lla­
       mando  a  /bin/sh  -c mandato, y regresa después de que la
       orden se haya terminado de ejecutar.  Durante la ejecucion
       de la orden, se bloqueará SIGCHLD y no se hace caso de las
       señales SIGINT ni SIGQUIT.

VALOR DEVUELTO
       El valor devuelto es 127 si la  llamada  a  execve()  para
       /bin/sh falla, -1 si se produce otro error, y el código de
       salida de la orden en cualquier otro caso.

       Si el valor de  mandato  es  NULL,  system()  devuelve  un
       número  distinto  de cero si hay un intérprete de comandos
       disponible, y cero si no.

       system() no afecta al estado de espera de  cualquier  otro
       proceso hijo.

CONFORME A
       C ANSI, POSIX.2, BSD 4.3

FALLOS
       Es extremadamente desafortunado que la versión de system()
       en libc no haga caso  de  las  interrupciones.  Esto  hace
       imposible interrumpir los programas que la llaman desde un
       bucle.  Lo cual significa que para tales propósitos uno no
       debería  utilizar  system() sino una versión privada, como
       la siguiente (aviso: ¡código no probado!):

       int mi_system (const char *mandato) {
           int pid, status;

           if (mandato == 0)
               return 1;   /* En UNIX/Linux siempre hay un shell */
           pid = fork();
           if (pid == -1)
               return -1;
           if (pid == 0) {
               char *argv[4];
               argv[0] = "sh";
               argv[1] = "-c";
               argv[2] = mandato;
               argv[3] = 0;
               execve("/bin/sh", argv, environ);
               exit(127);
           }
           do {
               if (waitpid(pid, &status, 0) == -1) {
                   if (errno != EINTR)
                       return -1;
               } else
                   return status;
           } while(1);
       }

       De hecho, system() no funcionará adecuadamente desde  pro­
       gramas  con privilegios suid o sgid en sistemas en los que
       /bin/sh sea la versión 2 de bash, ya que bash 2 omite  los
       privilegios  en  el momento de ejecutarse. (Debian usa una
       versión modificada de bash que  no  hace  esto  cuando  se
       invoca  como  sh).   No llame a system() desde un programa
       con privilegios suid o sgid, porque  pudiera  ser  que  se
       emplearan  valores  extraños  para  algunas  variables  de
       entorno para comprometer la integridad del sistema.  En su
       lugar  emplee  la familia de funciones exec(3), salvo exe­
       clp(3) o execvp(3).

       En realidad no se comprueba si el intérprete  de  comandos
       /bin/sh  está  disponible o no; en Linux siempre se supone
       que lo  está.  ISO  C  especifica  la  comprobación,  pero
       POSIX.2  especifica  que el valor devuelto siempre será no
       cero, ya que un sistema sin intérprete de comandos  no  es
       conforme, y esto es lo que se implementa.

       Es  posible  que  una  orden  del  intérprete  de comandos
       devuelva 127, así que ese  código  no  es  una  indicación
       segura de que execve() haya fallado; compruebe el valor de
       errno para asegurarse.

VÉASE TAMBIÉN
       sh(1), signal(2), exec(3)



GNU                        11 Mayo 1998                 SYSTEM(3)
