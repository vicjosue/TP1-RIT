RSA(1)                       OpenSSL                       RSA(1)



NNAAMMEE
       rsa - RSA key processing tool

SSYYNNOOPPSSIISS
       ooppeennssssll rrssaa [--iinnffoorrmm PPEEMM||NNEETT||DDEERR] [--oouuttffoorrmm PPEEMM||NNEETT||DDEERR]
       [--iinn ffiilleennaammee] [--ppaassssiinn aarrgg] [--oouutt ffiilleennaammee] [--ppaassssoouutt
       aarrgg] [--ssggcckkeeyy] [--ddeess] [--ddeess33] [--iiddeeaa] [--tteexxtt] [--nnoooouutt]
       [--mmoodduulluuss] [--cchheecckk] [--ppuubbiinn] [--ppuubboouutt]

DDEESSCCRRIIPPTTIIOONN
       The rrssaa command processes RSA keys. They can be converted
       between various forms and their components printed out.
       NNoottee this command uses the traditional SSLeay compatible
       format for private key encryption: newer applications
       should use the more secure PKCS#8 format using the ppkkccss88
       utility.

CCOOMMMMAANNDD OOPPTTIIOONNSS
       --iinnffoorrmm DDEERR||NNEETT||PPEEMM
           This specifies the input format. The DDEERR option uses
           an ASN1 DER encoded form compatible with the PKCS#1
           RSAPrivateKey or SubjectPublicKeyInfo format.  The PPEEMM
           form is the default format: it consists of the DDEERR
           format base64 encoded with additional header and
           footer lines. On input PKCS#8 format private keys are
           also accepted. The NNEETT form is a format is described
           in the NNOOTTEESS section.

       --oouuttffoorrmm DDEERR||NNEETT||PPEEMM
           This specifies the output format, the options have the
           same meaning as the --iinnffoorrmm option.

       --iinn ffiilleennaammee
           This specifies the input filename to read a key from
           or standard input if this option is not specified. If
           the key is encrypted a pass phrase will be prompted
           for.

       --ppaassssiinn aarrgg
           the input file password source. For more information
           about the format of aarrgg see the PPAASSSS PPHHRRAASSEE AARRGGUUMMEENNTTSS
           section in openssl(1).

       --oouutt ffiilleennaammee
           This specifies the output filename to write a key to
           or standard output if this option is not specified. If
           any encryption options are set then a pass phrase will
           be prompted for. The output filename should nnoott be the
           same as the input filename.

       --ppaassssoouutt ppaasssswwoorrdd
           the output file password source. For more information
           about the format of aarrgg see the PPAASSSS PPHHRRAASSEE AARRGGUUMMEENNTTSS
           section in openssl(1).

       --ssggcckkeeyy
           use the modified NET algorithm used with some versions
           of Microsoft IIS and SGC keys.

       --ddeess||--ddeess33||--iiddeeaa
           These options encrypt the private key with the DES,
           triple DES, or the IDEA ciphers respectively before
           outputting it. A pass phrase is prompted for.  If none
           of these options is specified the key is written in
           plain text. This means that using the rrssaa utility to
           read in an encrypted key with no encryption option can
           be used to remove the pass phrase from a key, or by
           setting the encryption options it can be use to add or
           change the pass phrase.  These options can only be
           used with PEM format output files.

       --tteexxtt
           prints out the various public or private key
           components in plain text in addition to the encoded
           version.

       --nnoooouutt
           this option prevents output of the encoded version of
           the key.

       --mmoodduulluuss
           this option prints out the value of the modulus of the
           key.

       --cchheecckk
           this option checks the consistency of an RSA private
           key.

       --ppuubbiinn
           by default a private key is read from the input file:
           with this option a public key is read instead.

       --ppuubboouutt
           by default a private key is output: with this option a
           public key will be output instead. This option is
           automatically set if the input is a public key.

NNOOTTEESS
       The PEM private key format uses the header and footer
       lines:

        -----BEGIN RSA PRIVATE KEY-----
        -----END RSA PRIVATE KEY-----

       The PEM public key format uses the header and footer
       lines:

        -----BEGIN PUBLIC KEY-----
        -----END PUBLIC KEY-----

       The NNEETT form is a format compatible with older Netscape
       servers and Microsoft IIS .key files, this uses unsalted
       RC4 for its encryption.  It is not very secure and so
       should only be used when necessary.

       Some newer version of IIS have additional data in the
       exported .key files. To use thse with the utility view the
       file with a binary editor and look for the string
       "private-key", then trace back to the byte sequence 0x30,
       0x82 (this is an ASN1 SEQUENCE). Copy all the data from
       this point onwards to another file and use that as the
       input to the rrssaa utility with the --iinnffoorrmm NNEETT option. If
       you get an error after entering the password try the
       --ssggcckkeeyy option.

EEXXAAMMPPLLEESS
       To remove the pass phrase on an RSA private key:

        openssl rsa -in key.pem -out keyout.pem

       To encrypt a private key using triple DES:

        openssl rsa -in key.pem -des3 -out keyout.pem

       To convert a private key from PEM to DER format:

        openssl rsa -in key.pem -outform DER -out keyout.der

       To print out the components of a private key to standard
       output:

        openssl rsa -in key.pem -text -noout

       To just output the public part of a private key:

        openssl rsa -in key.pem -pubout -out pubkey.pem


BBUUGGSS
       The command line password arguments don't currently work
       with NNEETT format.

       There should be an option that automatically handles .key
       files, without having to manually edit them.

SSEEEE AALLSSOO
       pkcs8(1), dsa(1), genrsa(1), gendsa(1)



























15/Jun/2000                   0.9.6c                       RSA(1)
