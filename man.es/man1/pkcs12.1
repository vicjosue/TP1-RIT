PKCS12(1)                    OpenSSL                    PKCS12(1)



NNAAMMEE
       pkcs12 - PKCS#12 file utility

SSYYNNOOPPSSIISS
       ooppeennssssll ppkkccss1122 [--eexxppoorrtt] [--cchhaaiinn] [--iinnkkeeyy ffiilleennaammee]
       [--cceerrttffiillee ffiilleennaammee] [--nnaammee nnaammee] [--ccaannaammee nnaammee] [--iinn
       ffiilleennaammee] [--oouutt ffiilleennaammee] [--nnoooouutt] [--nnoommaaccvveerr] [--nnoocceerrttss]
       [--ccllcceerrttss] [--ccaacceerrttss] [--nnookkeeyyss] [--iinnffoo] [--ddeess] [--ddeess33]
       [--iiddeeaa] [--nnooddeess] [--nnooiitteerr] [--mmaacciitteerr] [--ttwwooppaassss]
       [--ddeesscceerrtt] [--cceerrttppbbee] [--kkeeyyppbbee] [--kkeeyyeexx] [--kkeeyyssiigg]
       [--ppaasssswwoorrdd aarrgg] [--ppaassssiinn aarrgg] [--ppaassssoouutt aarrgg] [--rraanndd
       ffiillee((ss))]

DDEESSCCRRIIPPTTIIOONN
       The ppkkccss1122 command allows PKCS#12 files (sometimes
       referred to as PFX files) to be created and parsed.
       PKCS#12 files are used by several programs including
       Netscape, MSIE and MS Outlook.

CCOOMMMMAANNDD OOPPTTIIOONNSS
       There are a lot of options the meaning of some depends of
       whether a PKCS#12 file is being created or parsed. By
       default a PKCS#12 file is parsed a PKCS#12 file can be
       created by using the --eexxppoorrtt option (see below).

PPAARRSSIINNGG OOPPTTIIOONNSS
       --iinn ffiilleennaammee
           This specifies filename of the PKCS#12 file to be
           parsed. Standard input is used by default.

       --oouutt ffiilleennaammee
           The filename to write certificates and private keys
           to, standard output by default.  They are all written
           in PEM format.

       --ppaassss aarrgg, --ppaassssiinn aarrgg
           the PKCS#12 file (i.e. input file) password source.
           For more information about the format of aarrgg see the
           PPAASSSS PPHHRRAASSEE AARRGGUUMMEENNTTSS section in openssl(1).

       --ppaassssoouutt aarrgg
           pass phrase source to encrypt any outputed private
           keys with. For more information about the format of
           aarrgg see the PPAASSSS PPHHRRAASSEE AARRGGUUMMEENNTTSS section in
           openssl(1).

       --nnoooouutt
           this option inhibits output of the keys and
           certificates to the output file version of the PKCS#12
           file.

       --ccllcceerrttss
           only output client certificates (not CA certificates).

       --ccaacceerrttss
           only output CA certificates (not client certificates).

       --nnoocceerrttss
           no certificates at all will be output.

       --nnookkeeyyss
           no private keys will be output.

       --iinnffoo
           output additional information about the PKCS#12 file
           structure, algorithms used and iteration counts.

       --ddeess
           use DES to encrypt private keys before outputting.

       --ddeess33
           use triple DES to encrypt private keys before
           outputting, this is the default.

       --iiddeeaa
           use IDEA to encrypt private keys before outputting.

       --nnooddeess
           don't encrypt the private keys at all.

       --nnoommaaccvveerr
           don't attempt to verify the integrity MAC before
           reading the file.

       --ttwwooppaassss
           prompt for separate integrity and encryption
           passwords: most software always assumes these are the
           same so this option will render such PKCS#12 files
           unreadable.

FFIILLEE CCRREEAATTIIOONN OOPPTTIIOONNSS
       --eexxppoorrtt
           This option specifies that a PKCS#12 file will be
           created rather than parsed.

       --oouutt ffiilleennaammee
           This specifies filename to write the PKCS#12 file to.
           Standard output is used by default.

       --iinn ffiilleennaammee
           The filename to read certificates and private keys
           from, standard input by default.  They must all be in
           PEM format. The order doesn't matter but one private
           key and its corresponding certificate should be
           present. If additional certificates are present they
           will also be included in the PKCS#12 file.

       --iinnkkeeyy ffiilleennaammee
           file to read private key from. If not present then a
           private key must be present in the input file.

       --nnaammee ffrriieennddllyynnaammee
           This specifies the "friendly name" for the certificate
           and private key. This name is typically displayed in
           list boxes by software importing the file.

       --cceerrttffiillee ffiilleennaammee
           A filename to read additional certificates from.

       --ccaannaammee ffrriieennddllyynnaammee
           This specifies the "friendly name" for other
           certificates. This option may be used multiple times
           to specify names for all certificates in the order
           they appear. Netscape ignores friendly names on other
           certificates whereas MSIE displays them.

       --ppaassss aarrgg, --ppaassssoouutt aarrgg
           the PKCS#12 file (i.e. output file) password source.
           For more information about the format of aarrgg see the
           PPAASSSS PPHHRRAASSEE AARRGGUUMMEENNTTSS section in openssl(1).

       --ppaassssiinn ppaasssswwoorrdd
           pass phrase source to decrypt any input private keys
           with. For more information about the format of aarrgg see
           the PPAASSSS PPHHRRAASSEE AARRGGUUMMEENNTTSS section in openssl(1).

       --cchhaaiinn
           if this option is present then an attempt is made to
           include the entire certificate chain of the user
           certificate. The standard CA store is used for this
           search. If the search fails it is considered a fatal
           error.

       --ddeesscceerrtt
           encrypt the certificate using triple DES, this may
           render the PKCS#12 file unreadable by some "export
           grade" software. By default the private key is
           encrypted using triple DES and the certificate using
           40 bit RC2.

       --kkeeyyppbbee aallgg, --cceerrttppbbee aallgg
           these options allow the algorithm used to encrypt the
           private key and certificates to be selected. Although
           any PKCS#5 v1.5 or PKCS#12 algorithms can be selected
           it is advisable only to use PKCS#12 algorithms. See
           the list in the NNOOTTEESS section for more information.

       --kkeeyyeexx||--kkeeyyssiigg
           specifies that the private key is to be used for key
           exchange or just signing.  This option is only
           interpreted by MSIE and similar MS software. Normally
           "export grade" software will only allow 512 bit RSA
           keys to be used for encryption purposes but arbitrary
           length keys for signing. The --kkeeyyssiigg option marks the
           key for signing only. Signing only keys can be used
           for S/MIME signing, authenticode (ActiveX control
           signing)  and SSL client authentication, however due
           to a bug only MSIE 5.0 and later support the use of
           signing only keys for SSL client authentication.

       --nnoommaacciitteerr, --nnooiitteerr
           these options affect the iteration counts on the MAC
           and key algorithms.  Unless you wish to produce files
           compatible with MSIE 4.0 you should leave these
           options alone.

           To discourage attacks by using large dictionaries of
           common passwords the algorithm that derives keys from
           passwords can have an iteration count applied to it:
           this causes a certain part of the algorithm to be
           repeated and slows it down. The MAC is used to check
           the file integrity but since it will normally have the
           same password as the keys and certificates it could
           also be attacked.  By default both MAC and encryption
           iteration counts are set to 2048, using these options
           the MAC and encryption iteration counts can be set to
           1, since this reduces the file security you should not
           use these options unless you really have to. Most
           software supports both MAC and key iteration counts.
           MSIE 4.0 doesn't support MAC iteration counts so it
           needs the --nnoommaacciitteerr option.

       --mmaacciitteerr
           This option is included for compatibility with
           previous versions, it used to be needed to use MAC
           iterations counts but they are now used by default.

       --rraanndd ffiillee((ss))
           a file or files containing random data used to seed
           the random number generator, or an EGD socket (see
           RAND_egd(3)).  Multiple files can be specified
           separated by a OS-dependent character.  The separator
           is ;; for MS-Windows, ,, for OpenVMS, and :: for all
           others.

NNOOTTEESS
       Although there are a large number of options most of them
       are very rarely used. For PKCS#12 file parsing only --iinn
       and --oouutt need to be used for PKCS#12 file creation --eexxppoorrtt
       and --nnaammee are also used.

       If none of the --ccllcceerrttss, --ccaacceerrttss or --nnoocceerrttss options are
       present then all certificates will be output in the order
       they appear in the input PKCS#12 files. There is no
       guarantee that the first certificate present is the one
       corresponding to the private key. Certain software which
       requires a private key and certificate and assumes the
       first certificate in the file is the one corresponding to
       the private key: this may not always be the case. Using
       the --ccllcceerrttss option will solve this problem by only
       outputing the certificate corresponding to the private
       key. If the CA certificates are required then they can be
       output to a separate file using the --nnookkeeyyss --ccaacceerrttss
       options to just output CA certificates.

       The --kkeeyyppbbee and --cceerrttppbbee algorithms allow the precise
       encryption algorithms for private keys and certificates to
       be specified. Normally the defaults are fine but
       occasionally software can't handle triple DES encrypted
       private keys, then the option --kkeeyyppbbee PPBBEE--SSHHAA11--RRCC22--4400 can
       be used to reduce the private key encryption to 40 bit
       RC2. A complete description of all algorithms is contained
       in the ppkkccss88 manual page.

EEXXAAMMPPLLEESS
       Parse a PKCS#12 file and output it to a file:

        openssl pkcs12 -in file.p12 -out file.pem

       Output only client certificates to a file:

        openssl pkcs12 -in file.p12 -clcerts -out file.pem

       Don't encrypt the private key:

        openssl pkcs12 -in file.p12 -out file.pem -nodes

       Print some info about a PKCS#12 file:

        openssl pkcs12 -in file.p12 -info -noout

       Create a PKCS#12 file:

        openssl pkcs12 -export -in file.pem -out file.p12 -name "My Certificate"

       Include some extra certificates:

        openssl pkcs12 -export -in file.pem -out file.p12 -name "My Certificate" \
         -certfile othercerts.pem


BBUUGGSS
       Some would argue that the PKCS#12 standard is one big bug
       :-)

       Versions of OpenSSL before 0.9.6a had a bug in the PKCS#12
       key generation routines. Under rare circumstances this
       could produce a PKCS#12 file encrypted with an invalid
       key. As a result some PKCS#12 files which triggered this
       bug from other implementations (MSIE or Netscape) could
       not be decrypted by OpenSSL and similarly OpenSSL could
       produce PKCS#12 files which could not be decrypted by
       other implementations. The chances of producing such a
       file are relatively small: less than 1 in 256.

       A side effect of fixing this bug is that any old invalidly
       encrypted PKCS#12 files cannot no longer be parsed by the
       fixed version. Under such circumstances the ppkkccss1122 utility
       will report that the MAC is OK but fail with a decryption
       error when extracting private keys.

       This problem can be resolved by extracting the private
       keys and certificates from the PKCS#12 file using an older
       version of OpenSSL and recreating the PKCS#12 file from
       the keys and certificates using a newer version of
       OpenSSL. For example:

        old-openssl -in bad.p12 -out keycerts.pem
        openssl -in keycerts.pem -export -name "My PKCS#12 file" -out fixed.p12


SSEEEE AALLSSOO
       pkcs8(1)















































17/Mar/2001                   0.9.6c                    PKCS12(1)
