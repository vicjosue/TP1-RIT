REQ(1)                       OpenSSL                       REQ(1)



NNAAMMEE
       req - PKCS#10 certificate and certificate generating
       utility.

SSYYNNOOPPSSIISS
       ooppeennssssll rreeqq [--iinnffoorrmm PPEEMM||DDEERR] [--oouuttffoorrmm PPEEMM||DDEERR] [--iinn
       ffiilleennaammee] [--ppaassssiinn aarrgg] [--oouutt ffiilleennaammee] [--ppaassssoouutt aarrgg]
       [--tteexxtt] [--nnoooouutt] [--vveerriiffyy] [--mmoodduulluuss] [--nneeww] [--rraanndd
       ffiillee((ss))] [--nneewwkkeeyy rrssaa::bbiittss] [--nneewwkkeeyy ddssaa::ffiillee] [--nnooddeess]
       [--kkeeyy ffiilleennaammee] [--kkeeyyffoorrmm PPEEMM||DDEERR] [--kkeeyyoouutt ffiilleennaammee]
       [--[[mmdd55||sshhaa11||mmdd22||mmddcc22]]] [--ccoonnffiigg ffiilleennaammee] [--xx550099] [--ddaayyss
       nn] [--aassnn11--kklluuddggee] [--nneewwhhddrr] [--eexxtteennssiioonnss sseeccttiioonn]
       [--rreeqqeexxttss sseeccttiioonn]

DDEESSCCRRIIPPTTIIOONN
       The rreeqq command primarily creates and processes
       certificate requests in PKCS#10 format. It can
       additionally create self signed certificates for use as
       root CAs for example.

CCOOMMMMAANNDD OOPPTTIIOONNSS
       --iinnffoorrmm DDEERR||PPEEMM
           This specifies the input format. The DDEERR option uses
           an ASN1 DER encoded form compatible with the PKCS#10.
           The PPEEMM form is the default format: it consists of the
           DDEERR format base64 encoded with additional header and
           footer lines.

       --oouuttffoorrmm DDEERR||PPEEMM
           This specifies the output format, the options have the
           same meaning as the --iinnffoorrmm option.

       --iinn ffiilleennaammee
           This specifies the input filename to read a request
           from or standard input if this option is not
           specified. A request is only read if the creation
           options (--nneeww and --nneewwkkeeyy) are not specified.

       --ppaassssiinn aarrgg
           the input file password source. For more information
           about the format of aarrgg see the PPAASSSS PPHHRRAASSEE AARRGGUUMMEENNTTSS
           section in openssl(1).

       --oouutt ffiilleennaammee
           This specifies the output filename to write to or
           standard output by default.

       --ppaassssoouutt aarrgg
           the output file password source. For more information
           about the format of aarrgg see the PPAASSSS PPHHRRAASSEE AARRGGUUMMEENNTTSS
           section in openssl(1).

       --tteexxtt
           prints out the certificate request in text form.

       --nnoooouutt
           this option prevents output of the encoded version of
           the request.

       --mmoodduulluuss
           this option prints out the value of the modulus of the
           public key contained in the request.

       --vveerriiffyy
           verifies the signature on the request.

       --nneeww
           this option generates a new certificate request. It
           will prompt the user for the relevant field values.
           The actual fields prompted for and their maximum and
           minimum sizes are specified in the configuration file
           and any requested extensions.

           If the --kkeeyy option is not used it will generate a new
           RSA private key using information specified in the
           configuration file.

       --rraanndd ffiillee((ss))
           a file or files containing random data used to seed
           the random number generator, or an EGD socket (see
           RAND_egd(3)).  Multiple files can be specified
           separated by a OS-dependent character.  The separator
           is ;; for MS-Windows, ,, for OpenVMS, and :: for all
           others.

       --nneewwkkeeyy aarrgg
           this option creates a new certificate request and a
           new private key. The argument takes one of two forms.
           rrssaa::nnbbiittss, where nnbbiittss is the number of bits,
           generates an RSA key nnbbiittss in size. ddssaa::ffiilleennaammee
           generates a DSA key using the parameters in the file
           ffiilleennaammee.

       --kkeeyy ffiilleennaammee
           This specifies the file to read the private key from.
           It also accepts PKCS#8 format private keys for PEM
           format files.

       --kkeeyyffoorrmm PPEEMM||DDEERR
           the format of the private key file specified in the
           --kkeeyy argument. PEM is the default.

       --kkeeyyoouutt ffiilleennaammee
           this gives the filename to write the newly created
           private key to.  If this option is not specified then
           the filename present in the configuration file is
           used.

       --nnooddeess
           if this option is specified then if a private key is
           created it will not be encrypted.

       --[[mmdd55||sshhaa11||mmdd22||mmddcc22]]
           this specifies the message digest to sign the request
           with. This overrides the digest algorithm specified in
           the configuration file.  This option is ignored for
           DSA requests: they always use SHA1.

       --ccoonnffiigg ffiilleennaammee
           this allows an alternative configuration file to be
           specified, this overrides the compile time filename or
           any specified in the OOPPEENNSSSSLL_CCOONNFF environment
           variable.

       --xx550099
           this option outputs a self signed certificate instead
           of a certificate request. This is typically used to
           generate a test certificate or a self signed root CA.
           The extensions added to the certificate (if any) are
           specified in the configuration file.

       --ddaayyss nn
           when the --xx550099 option is being used this specifies the
           number of days to certify the certificate for. The
           default is 30 days.

       --eexxtteennssiioonnss sseeccttiioonn

       --rreeqqeexxttss sseeccttiioonn
           these options specify alternative sections to include
           certificate extensions (if the --xx550099 option is
           present) or certificate request extensions. This
           allows several different sections to be used in the
           same configuration file to specify requests for a
           variety of purposes.

       --aassnn11--kklluuddggee
           by default the rreeqq command outputs certificate
           requests containing no attributes in the correct
           PKCS#10 format. However certain CAs will only accept
           requests containing no attributes in an invalid form:
           this option produces this invalid format.

           More precisely the AAttttrriibbuutteess in a PKCS#10 certificate
           request are defined as a SSEETT OOFF AAttttrriibbuuttee. They are
           nnoott OOPPTTIIOONNAALL so if no attributes are present then they
           should be encoded as an empty SSEETT OOFF. The invalid form
           does not include the empty SSEETT OOFF whereas the correct
           form does.

           It should be noted that very few CAs still require the
           use of this option.

       --nneewwhhddrr
           Adds the word NNEEWW to the PEM file header and footer
           lines on the outputed request. Some software (Netscape
           certificate server) and some CAs need this.

CCOONNFFIIGGUURRAATTIIOONN FFIILLEE FFOORRMMAATT
       The configuration options are specified in the rreeqq section
       of the configuration file. As with all configuration files
       if no value is specified in the specific section (i.e.
       rreeqq) then the initial unnamed or ddeeffaauulltt section is
       searched too.

       The options available are described in detail below.

       iinnppuutt_ppaasssswwoorrdd oouuttppuutt_ppaasssswwoorrdd
           The passwords for the input private key file (if
           present) and the output private key file (if one will
           be created). The command line options ppaassssiinn and
           ppaassssoouutt override the configuration file values.

       ddeeffaauulltt_bbiittss
           This specifies the default key size in bits. If not
           specified then 512 is used. It is used if the --nneeww
           option is used. It can be overridden by using the
           --nneewwkkeeyy option.

       ddeeffaauulltt_kkeeyyffiillee
           This is the default filename to write a private key
           to. If not specified the key is written to standard
           output. This can be overridden by the --kkeeyyoouutt option.


       ooiidd_ffiillee
           This specifies a file containing additional OOBBJJEECCTT
           IIDDEENNTTIIFFIIEERRSS.  Each line of the file should consist of
           the numerical form of the object identifier followed
           by white space then the short name followed by white
           space and finally the long name.

       ooiidd_sseeccttiioonn
           This specifies a section in the configuration file
           containing extra object identifiers. Each line should
           consist of the short name of the object identifier
           followed by == and the numerical form. The short and
           long names are the same when this option is used.

       RRAANNDDFFIILLEE
           This specifies a filename in which random number seed
           information is placed and read from, or an EGD socket
           (see RAND_egd(3)).  It is used for private key
           generation.

       eennccrryypptt_kkeeyy
           If this is set to nnoo then if a private key is
           generated it is nnoott encrypted. This is equivalent to
           the --nnooddeess command line option. For compatibility
           eennccrryypptt_rrssaa_kkeeyy is an equivalent option.

       ddeeffaauulltt_mmdd
           This option specifies the digest algorithm to use.
           Possible values include mmdd55 sshhaa11 mmddcc22. If not present
           then MD5 is used. This option can be overridden on the
           command line.

       ssttrriinngg_mmaasskk
           This option masks out the use of certain string types
           in certain fields. Most users will not need to change
           this option.

           It can be set to several values ddeeffaauulltt which is also
           the default option uses PrintableStrings, T61Strings
           and BMPStrings if the ppkkiixx value is used then only
           PrintableStrings and BMPStrings will be used. This
           follows the PKIX recommendation in RFC2459. If the
           uuttff88oonnllyy option is used then only UTF8Strings will be
           used: this is the PKIX recommendation in RFC2459 after
           2003. Finally the nnoommbbssttrr option just uses
           PrintableStrings and T61Strings: certain software has
           problems with BMPStrings and UTF8Strings: in
           particular Netscape.

       rreeqq_eexxtteennssiioonnss
           this specifies the configuration file section
           containing a list of extensions to add to the
           certificate request. It can be overridden by the
           --rreeqqeexxttss command line switch.

       xx550099_eexxtteennssiioonnss
           this specifies the configuration file section
           containing a list of extensions to add to certificate
           generated when the --xx550099 switch is used. It can be
           overridden by the --eexxtteennssiioonnss command line switch.

       pprroommpptt
           if set to the value nnoo this disables prompting of
           certificate fields and just takes values from the
           config file directly. It also changes the expected
           format of the ddiissttiinngguuiisshheedd_nnaammee and aattttrriibbuutteess
           sections.

       aattttrriibbuutteess
           this specifies the section containing any request
           attributes: its format is the same as
           ddiissttiinngguuiisshheedd_nnaammee. Typically these may contain the
           challengePassword or unstructuredName types. They are
           currently ignored by OpenSSL's request signing
           utilities but some CAs might want them.

       ddiissttiinngguuiisshheedd_nnaammee
           This specifies the section containing the
           distinguished name fields to prompt for when
           generating a certificate or certificate request. The
           format is described in the next section.

DDIISSTTIINNGGUUIISSHHEEDD NNAAMMEE AANNDD AATTTTRRIIBBUUTTEE SSEECCTTIIOONN FFOORRMMAATT
       There are two separate formats for the distinguished name
       and attribute sections. If the pprroommpptt option is set to nnoo
       then these sections just consist of field names and
       values: for example,

        CN=My Name
        OU=My Organization
        emailAddress=someone@somewhere.org

       This allows external programs (e.g. GUI based) to generate
       a template file with all the field names and values and
       just pass it to rreeqq. An example of this kind of
       configuration file is contained in the EEXXAAMMPPLLEESS section.

       Alternatively if the pprroommpptt option is absent or not set to
       nnoo then the file contains field prompting information. It
       consists of lines of the form:

        fieldName="prompt"
        fieldName_default="default field value"
        fieldName_min= 2
        fieldName_max= 4

       "fieldName" is the field name being used, for example
       commonName (or CN).  The "prompt" string is used to ask
       the user to enter the relevant details. If the user enters
       nothing then the default value is used if no default value
       is present then the field is omitted. A field can still be
       omitted if a default value is present if the user just
       enters the '.' character.

       The number of characters entered must be between the
       fieldName_min and fieldName_max limits: there may be
       additional restrictions based on the field being used (for
       example countryName can only ever be two characters long
       and must fit in a PrintableString).

       Some fields (such as organizationName) can be used more
       than once in a DN. This presents a problem because
       configuration files will not recognize the same name
       occurring twice. To avoid this problem if the fieldName
       contains some characters followed by a full stop they will
       be ignored. So for example a second organizationName can
       be input by calling it "1.organizationName".

       The actual permitted field names are any object identifier
       short or long names. These are compiled into OpenSSL and
       include the usual values such as commonName, countryName,
       localityName, organizationName, organizationUnitName,
       stateOrPrivinceName. Additionally emailAddress is include
       as well as name, surname, givenName initials and
       dnQualifier.

       Additional object identifiers can be defined with the
       ooiidd_ffiillee or ooiidd_sseeccttiioonn options in the configuration file.
       Any additional fields will be treated as though they were
       a DirectoryString.

EEXXAAMMPPLLEESS
       Examine and verify certificate request:

        openssl req -in req.pem -text -verify -noout

       Create a private key and then generate a certificate
       request from it:

        openssl genrsa -out key.pem 1024
        openssl req -new -key key.pem -out req.pem

       The same but just using req:

        openssl req -newkey rsa:1024 -keyout key.pem -out req.pem

       Generate a self signed root certificate:

        openssl req -x509 -newkey rsa:1024 -keyout key.pem -out req.pem

       Example of a file pointed to by the ooiidd_ffiillee option:

        1.2.3.4        shortName       A longer Name
        1.2.3.6        otherName       Other longer Name

       Example of a section pointed to by ooiidd_sseeccttiioonn making use
       of variable expansion:

        testoid1=1.2.3.5
        testoid2=${testoid1}.6

       Sample configuration file prompting for field values:

        [ req ]
        default_bits           = 1024
        default_keyfile        = privkey.pem
        distinguished_name     = req_distinguished_name
        attributes             = req_attributes
        x509_extensions        = v3_ca

        dirstring_type = nobmp

        [ req_distinguished_name ]
        countryName                    = Country Name (2 letter code)
        countryName_default            = AU
        countryName_min                = 2
        countryName_max                = 2

        localityName                   = Locality Name (eg, city)

        organizationalUnitName         = Organizational Unit Name (eg, section)

        commonName                     = Common Name (eg, YOUR name)
        commonName_max                 = 64

        emailAddress                   = Email Address
        emailAddress_max               = 40

        [ req_attributes ]
        challengePassword              = A challenge password
        challengePassword_min          = 4
        challengePassword_max          = 20

        [ v3_ca ]

        subjectKeyIdentifier=hash
        authorityKeyIdentifier=keyid:always,issuer:always
        basicConstraints = CA:true

       Sample configuration containing all field values:

        RANDFILE               = $ENV::HOME/.rnd

        [ req ]
        default_bits           = 1024
        default_keyfile        = keyfile.pem
        distinguished_name     = req_distinguished_name
        attributes             = req_attributes
        prompt                 = no
        output_password        = mypass

        [ req_distinguished_name ]
        C                      = GB
        ST                     = Test State or Province
        L                      = Test Locality
        O                      = Organization Name
        OU                     = Organizational Unit Name
        CN                     = Common Name
        emailAddress           = test@email.address

        [ req_attributes ]
        challengePassword              = A challenge password


NNOOTTEESS
       The header and footer lines in the PPEEMM format are
       normally:

        -----BEGIN CERTIFICATE REQUEST----
        -----END CERTIFICATE REQUEST----

       some software (some versions of Netscape certificate
       server) instead needs:

        -----BEGIN NEW CERTIFICATE REQUEST----
        -----END NEW CERTIFICATE REQUEST----

       which is produced with the --nneewwhhddrr option but is otherwise
       compatible.  Either form is accepted transparently on
       input.

       The certificate requests generated by XXeennrroollll with MSIE
       have extensions added. It includes the kkeeyyUUssaaggee extension
       which determines the type of key (signature only or
       general purpose) and any additional OIDs entered by the
       script in an extendedKeyUsage extension.

DDIIAAGGNNOOSSTTIICCSS
       The following messages are frequently asked about:

               Using configuration from /some/path/openssl.cnf
               Unable to load config info

       This is followed some time later by...

               unable to find 'distinguished_name' in config
               problems making Certificate Request

       The first error message is the clue: it can't find the
       configuration file! Certain operations (like examining a
       certificate request) don't need a configuration file so
       its use isn't enforced. Generation of certificates or
       requests however does need a configuration file. This
       could be regarded as a bug.

       Another puzzling message is this:

               Attributes:
                   a0:00

       this is displayed when no attributes are present and the
       request includes the correct empty SSEETT OOFF structure (the
       DER encoding of which is 0xa0 0x00). If you just see:

               Attributes:

       then the SSEETT OOFF is missing and the encoding is technically
       invalid (but it is tolerated). See the description of the
       command line option --aassnn11--kklluuddggee for more information.

EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
       The variable OOPPEENNSSSSLL_CCOONNFF if defined allows an alternative
       configuration file location to be specified, it will be
       overridden by the --ccoonnffiigg command line switch if it is
       present. For compatibility reasons the SSSSLLEEAAYY_CCOONNFF
       environment variable serves the same purpose but its use
       is discouraged.

BBUUGGSS
       OpenSSL's handling of T61Strings (aka TeletexStrings) is
       broken: it effectively treats them as ISO-8859-1 (Latin
       1), Netscape and MSIE have similar behaviour.  This can
       cause problems if you need characters that aren't
       available in PrintableStrings and you don't want to or
       can't use BMPStrings.

       As a consequence of the T61String handling the only
       correct way to represent accented characters in OpenSSL is
       to use a BMPString: unfortunately Netscape currently
       chokes on these. If you have to use accented characters
       with Netscape and MSIE then you currently need to use the
       invalid T61String form.

       The current prompting is not very friendly. It doesn't
       allow you to confirm what you've just entered. Other
       things like extensions in certificate requests are
       statically defined in the configuration file. Some of
       these: like an email address in subjectAltName should be
       input by the user.

SSEEEE AALLSSOO
       x509(1), ca(1), genrsa(1), gendsa(1), config(5)
























































22/Jun/2000                   0.9.6c                       REQ(1)
