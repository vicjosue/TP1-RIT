PERLFAQ3(1)      Perl Programmers Reference Guide     PERLFAQ3(1)



NNAAMMEE
       perlfaq3 - Programming Tools ($Revision: 1.38 $, $Date:
       1999/05/23 16:08:30 $)

DDEESSCCRRIIPPTTIIOONN
       This section of the FAQ answers questions related to pro­
       grammer tools and programming support.

       HHooww ddoo II ddoo ((aannyytthhiinngg))??

       Have you looked at CPAN (see the perlfaq2 manpage)?  The
       chances are that someone has already written a module that
       can solve your problem.  Have you read the appropriate man
       pages?  Here's a brief index:

               Basics          perldata, perlvar, perlsyn, perlop, perlsub
               Execution       perlrun, perldebug
               Functions       perlfunc
               Objects         perlref, perlmod, perlobj, perltie
               Data Structures perlref, perllol, perldsc
               Modules         perlmod, perlmodlib, perlsub
               Regexes         perlre, perlfunc, perlop, perllocale
               Moving to perl5 perltrap, perl
               Linking w/C     perlxstut, perlxs, perlcall, perlguts, perlembed
               Various         http://www.perl.com/CPAN/doc/FMTEYEWTK/index.html
                               (not a man-page but still useful)

       A crude table of contents for the Perl man page set is
       found in the perltoc manpage.

       HHooww ccaann II uussee PPeerrll iinntteerraaccttiivveellyy??

       The typical approach uses the Perl debugger, described in
       the perldebug(1) man page, on an ``empty'' program, like
       this:

           perl -de 42

       Now just type in any legal Perl code, and it will be imme­
       diately evaluated.  You can also examine the symbol table,
       get stack backtraces, check variable values, set break­
       points, and other operations typically found in symbolic
       debuggers.

       IIss tthheerree aa PPeerrll sshheellll??

       In general, no.  The Shell.pm module (distributed with
       Perl) makes Perl try commands which aren't part of the
       Perl language as shell commands.  perlsh from the source
       distribution is simplistic and uninteresting, but may
       still be what you want.

       HHooww ddoo II ddeebbuugg mmyy PPeerrll pprrooggrraammss??

       Have you tried "use warnings" or used "-w"?  They enable
       warnings to detect dubious practices.

       Have you tried "use strict"?  It prevents you from using
       symbolic references, makes you predeclare any subroutines
       that you call as bare words, and (probably most impor­
       tantly) forces you to predeclare your variables with "my",
       "our", or "use vars".

       Did you check the return values of each and every system
       call?  The operating system (and thus Perl) tells you
       whether they worked, and if not why.

         open(FH, "> /etc/cantwrite")
           or die "Couldn't write to /etc/cantwrite: $!\n";

       Did you read the perltrap manpage?  It's full of gotchas
       for old and new Perl programmers and even has sections for
       those of you who are upgrading from languages like awk and
       C.

       Have you tried the Perl debugger, described in the perlde­
       bug manpage?  You can step through your program and see
       what it's doing and thus work out why what it's doing
       isn't what it should be doing.

       HHooww ddoo II pprrooffiillee mmyy PPeerrll pprrooggrraammss??

       You should get the Devel::DProf module from the standard
       distribution (or separately on CPAN) and also use Bench­
       mark.pm from the standard distribution.  The Benchmark
       module lets you time specific portions of your code, while
       Devel::DProf gives detailed breakdowns of where your code
       spends its time.

       Here's a sample use of Benchmark:

         use Benchmark;

         @junk = `cat /etc/motd`;
         $count = 10_000;

         timethese($count, {
                   'map' => sub { my @a = @junk;
                                  map { s/a/b/ } @a;
                                  return @a
                                },
                   'for' => sub { my @a = @junk;
                                  local $_;
                                  for (@a) { s/a/b/ };
                                  return @a },
                  });

       This is what it prints (on one machine--your results will
       be dependent on your hardware, operating system, and the
       load on your machine):

         Benchmark: timing 10000 iterations of for, map...
                for:  4 secs ( 3.97 usr  0.01 sys =  3.98 cpu)
                map:  6 secs ( 4.97 usr  0.00 sys =  4.97 cpu)

       Be aware that a good benchmark is very hard to write.  It
       only tests the data you give it and proves little about
       the differing complexities of contrasting algorithms.

       HHooww ddoo II ccrroossss--rreeffeerreennccee mmyy PPeerrll pprrooggrraammss??

       The B::Xref module, shipped with the new, alpha-release
       Perl compiler (not the general distribution prior to the
       5.005 release), can be used to generate cross-reference
       reports for Perl programs.

           perl -MO=Xref[,OPTIONS] scriptname.plx


       IIss tthheerree aa pprreettttyy--pprriinntteerr ((ffoorrmmaatttteerr)) ffoorr PPeerrll??

       There is no program that will reformat Perl as much as
       indent(1) does for C.  The complex feedback between the
       scanner and the parser (this feedback is what confuses the
       vgrind and emacs programs) makes it challenging at best to
       write a stand-alone Perl parser.

       Of course, if you simply follow the guidelines in the
       perlstyle manpage, you shouldn't need to reformat.  The
       habit of formatting your code as you write it will help
       prevent bugs.  Your editor can and should help you with
       this.  The perl-mode or newer cperl-mode for emacs can
       provide remarkable amounts of help with most (but not all)
       code, and even less programmable editors can provide sig­
       nificant assistance.  Tom swears by the following settings
       in vi and its clones:

           set ai sw=4
           map! ^O {^M}^[O^T

       Now put that in your .exrc file (replacing the caret char­
       acters with control characters) and away you go.  In
       insert mode, ^T is for indenting, ^D is for undenting, and
       ^O is for blockdenting-- as it were.  If you haven't used
       the last one, you're missing a lot.  A more complete exam­
       ple, with comments, can be found at
       http://www.perl.com/CPAN-
       local/authors/id/TOMC/scripts/toms.exrc.gz

       If you are used to using the vgrind program for printing
       out nice code to a laser printer, you can take a stab at
       this using http://www.perl.com/CPAN/doc/misc/tips/work­
       ing.vgrind.entry, but the results are not particularly
       satisfying for sophisticated code.

       The a2ps at http://www.infres.enst.fr/%7Edemaille/a2ps/
       does lots of things related to generating nicely printed
       output of documents.

       IIss tthheerree aa ccttaaggss ffoorr PPeerrll??

       There's a simple one at
       http://www.perl.com/CPAN/authors/id/TOMC/scripts/ptags.gz
       which may do the trick.  And if not, it's easy to hack
       into what you want.

       IIss tthheerree aann IIDDEE oorr WWiinnddoowwss PPeerrll EEddiittoorr??

       Perl programs are just plain text, so any editor will do.

       If you're on Unix, you already have an IDE--Unix itself.
       The UNIX philosophy is the philosophy of several small
       tools that each do one thing and do it well.  It's like a
       carpenter's toolbox.

       If you want a Windows IDE, check the following:

       CodeMagicCD
           http://www.codemagiccd.com/

       Komodo
           ActiveState's cross-platform, multi-language IDE has
           Perl support, including a regular expression debugger
           and remote debugging
           (http://www.ActiveState.com/Prod­
           ucts/Komodo/index.html).  (Visual Perl, a Visual Stu­
           dio.NET plug-in is currently (early 2001) in beta
           (http://www.ActiveState.com/Products/Visu­
           alPerl/index.html)).

       The Object System
           (http://www.castlelink.co.uk/object_system/) is a Perl
           web applications development IDE.

       PerlBuilder
           (http://www.solutionsoft.com/perl.htm) is an inte­
           grated development environment for Windows that sup­
           ports Perl development.

       Perl code magic
           (http://www.petes-place.com/codemagic.html).

       visiPerl+
           http://helpconsulting.net/visiperl/, from Help Con­
           sulting.

       For editors: if you're on Unix you probably have vi or a
       vi clone already, and possibly an emacs too, so you may
       not need to download anything.  In any emacs the cperl-
       mode (M-x cperl-mode) gives you perhaps the best available
       Perl editing mode in any editor.

       For Windows editors: you can download an Emacs

       GNU Emacs
           http://www.gnu.org/software/emacs/windows/ntemacs.html

       MicroEMACS
           http://members.nbci.com/uemacs/

       XEmacs
           http://www.xemacs.org/Download/index.html

       or a vi clone such as

       Elvis
           ftp://ftp.cs.pdx.edu/pub/elvis/ http://www.fh-
           wedel.de/elvis/

       Vile
           http://vile.cx/

       Vim http://www.vim.org/

           win32: http://www.cs.vu.nl/%7Etmgil/vi.html

       For vi lovers in general, Windows or elsewhere:
       http://www.thomer.com/thomer/vi/vi.html.

       nvi (http://www.bostic.com/vi/, available from CPAN in
       src/misc/) is yet another vi clone, unfortunately not
       available for Windows, but in UNIX platforms you might be
       interested in trying it out, firstly because strictly
       speaking it is not a vi clone, it is the real vi, or the
       new incarnation of it, and secondly because you can embed
       Perl inside it to use Perl as the scripting language.  nvi
       is not alone in this, though: at least also vim and vile
       offer an embedded Perl.

       The following are Win32 multilanguage editor/IDESs that
       support Perl:

       Codewright
           http://www.starbase.com/

       MultiEdit
           http://www.MultiEdit.com/

       SlickEdit
           http://www.slickedit.com/

       There is also a toyedit Text widget based editor written
       in Perl that is distributed with the Tk module on CPAN.
       The ptkdb (http://world.std.com/~aep/ptkdb/) is a Perl/tk
       based debugger that acts as a development environment of
       sorts.  Perl Composer (http://perlcomposer.source­
       forge.net/vperl.html) is an IDE for Perl/Tk GUI creation.

       In addition to an editor/IDE you might be interested in a
       more powerful shell environment for Win32.  Your options
       include

       Bash
           from the Cygwin package (http://sources.red­
           hat.com/cygwin/)

       Ksh from the MKS Toolkit (http://www.mks.com/), or the
           Bourne shell of the U/WIN environment
           (http://www.research.att.com/sw/tools/uwin/)

       Tcsh
           ftp://ftp.astron.com/pub/tcsh/, see also
           http://www.primate.wisc.edu/software/csh-tcsh-book/

       Zsh ftp://ftp.blarg.net/users/amol/zsh/, see also
           http://www.zsh.org/

       MKS and U/WIN are commercial (U/WIN is free for educa­
       tional and research purposes), Cygwin is covered by the
       GNU Public License (but that shouldn't matter for Perl
       use).  The Cygwin, MKS, and U/WIN all contain (in addition
       to the shells) a comprehensive set of standard UNIX
       toolkit utilities.

       If you're transferring text files between Unix and Windows
       using FTP be sure to transfer them in ASCII mode so the
       ends of lines are appropriately converted.

       On Mac OS the MacPerl Application comes with a simple 32k
       text editor that behaves like a rudimentary IDE.  In con­
       trast to the MacPerl Application the MPW Perl tool can
       make use of the MPW Shell itself as an editor (with no 32k
       limit).

       BBEdit and BBEdit Lite
           are text editors for Mac OS that have a Perl sensitiv­
           ity mode (http://web.barebones.com/).

       Alpha
           is an editor, written and extensible in Tcl, that
           nonetheless has built in support for several popular
           markup and programming languages including Perl and
           HTML (http://alpha.olm.net/).

       Pepper and Pe are programming language sensitive text edi­
       tors for Mac OS X and BeOS respectively
       (http://www.hekkelman.com/).

       WWhheerree ccaann II ggeett PPeerrll mmaaccrrooss ffoorr vvii??

       For a complete version of Tom Christiansen's vi configura­
       tion file, see http://www.perl.com/CPAN/authors/Tom_Chris­
       tiansen/scripts/toms.exrc.gz , the standard benchmark file
       for vi emulators.  The file runs best with nvi, the cur­
       rent version of vi out of Berkeley, which incidentally can
       be built with an embedded Perl interpreter--see
       http://www.perl.com/CPAN/src/misc.

       WWhheerree ccaann II ggeett ppeerrll--mmooddee ffoorr eemmaaccss??

       Since Emacs version 19 patchlevel 22 or so, there have
       been both a perl-mode.el and support for the Perl debugger
       built in.  These should come with the standard Emacs 19
       distribution.

       In the Perl source directory, you'll find a directory
       called "emacs", which contains a cperl-mode that color-
       codes keywords, provides context-sensitive help, and other
       nifty things.

       Note that the perl-mode of emacs will have fits with
       ""main'foo"" (single quote), and mess up the indentation
       and highlighting.  You are probably using ""main::foo"" in
       new Perl code anyway, so this shouldn't be an issue.

       HHooww ccaann II uussee ccuurrsseess wwiitthh PPeerrll??

       The Curses module from CPAN provides a dynamically load­
       able object module interface to a curses library.  A small
       demo can be found at the directory
       http://www.perl.com/CPAN/authors/Tom_Chris­
       tiansen/scripts/rep; this program repeats a command and
       updates the screen as needed, rendering rreepp ppss aaxxuu similar
       to ttoopp.

       HHooww ccaann II uussee XX oorr TTkk wwiitthh PPeerrll??

       Tk is a completely Perl-based, object-oriented interface
       to the Tk toolkit that doesn't force you to use Tcl just
       to get at Tk.  Sx is an interface to the Athena Widget
       set.  Both are available from CPAN.  See the directory
       http://www.perl.com/CPAN/modules/by-cate­
       gory/08_User_Interfaces/

       Invaluable for Perl/Tk programming are the Perl/Tk FAQ at
       http://w4.lns.cornell.edu/%7Epvhp/ptk/ptkTOC.html , the
       Perl/Tk Reference Guide available at
       http://www.perl.com/CPAN-local/authors/Stephen_O_Lidie/ ,
       and the online manpages at http://www-
       users.cs.umn.edu/%7Eamundson/perl/perltk/toc.html .

       HHooww ccaann II ggeenneerraattee ssiimmppllee mmeennuuss wwiitthhoouutt uussiinngg CCGGII oorr TTkk??

       The http://www.perl.com/CPAN/authors/id/SKUNZ/perl­
       menu.v4.0.tar.gz module, which is curses-based, can help
       with this.

       WWhhaatt iiss uunndduummpp??

       See the next question on ``How can I make my Perl program
       run faster?''


       HHooww ccaann II mmaakkee mmyy PPeerrll pprrooggrraamm rruunn ffaasstteerr??

       The best way to do this is to come up with a better algo­
       rithm.  This can often make a dramatic difference.  Jon
       Bentley's book ``Programming Pearls'' (that's not a mis­
       spelling!)  has some good tips on optimization, too.
       Advice on benchmarking boils down to: benchmark and pro­
       file to make sure you're optimizing the right part, look
       for better algorithms instead of microtuning your code,
       and when all else fails consider just buying faster hard­
       ware.

       A different approach is to autoload seldom-used Perl code.
       See the AutoSplit and AutoLoader modules in the standard
       distribution for that.  Or you could locate the bottleneck
       and think about writing just that part in C, the way we
       used to take bottlenecks in C code and write them in
       assembler.  Similar to rewriting in C, modules that have
       critical sections can be written in C (for instance, the
       PDL module from CPAN).

       In some cases, it may be worth it to use the backend com­
       piler to produce byte code (saving compilation time) or
       compile into C, which will certainly save compilation time
       and sometimes a small amount (but not much) execution
       time.  See the question about compiling your Perl programs
       for more on the compiler--the wins aren't as obvious as
       you'd hope.

       If you're currently linking your perl executable to a
       shared libc.so, you can often gain a 10-25% performance
       benefit by rebuilding it to link with a static libc.a
       instead.  This will make a bigger perl executable, but
       your Perl programs (and programmers) may thank you for it.
       See the INSTALL file in the source distribution for more
       information.

       Unsubstantiated reports allege that Perl interpreters that
       use sfio outperform those that don't (for I/O intensive
       applications).  To try this, see the INSTALL file in the
       source distribution, especially the ``Selecting File I/O
       mechanisms'' section.

       The undump program was an old attempt to speed up your
       Perl program by storing the already-compiled form to disk.
       This is no longer a viable option, as it only worked on a
       few architectures, and wasn't a good solution anyway.

       HHooww ccaann II mmaakkee mmyy PPeerrll pprrooggrraamm ttaakkee lleessss mmeemmoorryy??

       When it comes to time-space tradeoffs, Perl nearly always
       prefers to throw memory at a problem.  Scalars in Perl use
       more memory than strings in C, arrays take more than that,
       and hashes use even more.  While there's still a lot to be
       done, recent releases have been addressing these issues.
       For example, as of 5.004, duplicate hash keys are shared
       amongst all hashes using them, so require no reallocation.

       In some cases, using substr() or vec() to simulate arrays
       can be highly beneficial.  For example, an array of a
       thousand booleans will take at least 20,000 bytes of
       space, but it can be turned into one 125-byte bit vec­
       tor--a considerable memory savings.  The standard
       Tie::SubstrHash module can also help for certain types of
       data structure.  If you're working with specialist data
       structures (matrices, for instance) modules that implement
       these in C may use less memory than equivalent Perl mod­
       ules.

       Another thing to try is learning whether your Perl was
       compiled with the system malloc or with Perl's builtin
       malloc.  Whichever one it is, try using the other one and
       see whether this makes a difference.  Information about
       malloc is in the INSTALL file in the source distribution.
       You can find out whether you are using perl's malloc by
       typing "perl -V:usemymalloc".

       IIss iitt uunnssaaffee ttoo rreettuurrnn aa ppooiinntteerr ttoo llooccaall ddaattaa??

       No, Perl's garbage collection system takes care of this.

           sub makeone {
               my @a = ( 1 .. 10 );
               return \@a;
           }

           for $i ( 1 .. 10 ) {
               push @many, makeone();
           }

           print $many[4][5], "\n";

           print "@many\n";


       HHooww ccaann II ffrreeee aann aarrrraayy oorr hhaasshh ssoo mmyy pprrooggrraamm sshhrriinnkkss??

       You can't.  On most operating systems, memory allocated to
       a program can never be returned to the system.  That's why
       long-running programs sometimes re-exec themselves.  Some
       operating systems (notably, FreeBSD and Linux) allegedly
       reclaim large chunks of memory that is no longer used, but
       it doesn't appear to happen with Perl (yet).  The Mac
       appears to be the only platform that will reliably
       (albeit, slowly) return memory to the OS.

       We've had reports that on Linux (Redhat 5.1) on Intel,
       "undef $scalar" will return memory to the system, while on
       Solaris 2.6 it won't.  In general, try it yourself and
       see.

       However, judicious use of my() on your variables will help
       make sure that they go out of scope so that Perl can free
       up that space for use in other parts of your program.  A
       global variable, of course, never goes out of scope, so
       you can't get its space automatically reclaimed, although
       undef()ing and/or delete()ing it will achieve the same
       effect.  In general, memory allocation and de-allocation
       isn't something you can or should be worrying about much
       in Perl, but even this capability (preallocation of data
       types) is in the works.

       HHooww ccaann II mmaakkee mmyy CCGGII ssccrriipptt mmoorree eeffffiicciieenntt??

       Beyond the normal measures described to make general Perl
       programs faster or smaller, a CGI program has additional
       issues.  It may be run several times per second.  Given
       that each time it runs it will need to be re-compiled and
       will often allocate a megabyte or more of system memory,
       this can be a killer.  Compiling into C iissnn''tt ggooiinngg ttoo
       hheellpp yyoouu because the process start-up overhead is where
       the bottleneck is.

       There are two popular ways to avoid this overhead.  One
       solution involves running the Apache HTTP server (avail­
       able from http://www.apache.org/) with either of the
       mod_perl or mod_fastcgi plugin modules.

       With mod_perl and the Apache::Registry module (distributed
       with mod_perl), httpd will run with an embedded Perl
       interpreter which pre-compiles your script and then exe­
       cutes it within the same address space without forking.
       The Apache extension also gives Perl access to the inter­
       nal server API, so modules written in Perl can do just
       about anything a module written in C can.  For more on
       mod_perl, see http://perl.apache.org/

       With the FCGI module (from CPAN) and the mod_fastcgi mod­
       ule (available from http://www.fastcgi.com/) each of your
       Perl programs becomes a permanent CGI daemon process.

       Both of these solutions can have far-reaching effects on
       your system and on the way you write your CGI programs, so
       investigate them with care.

       See http://www.perl.com/CPAN/modules/by-cate­
       gory/15_World_Wide_Web_HTML_HTTP_CGI/ .

       A non-free, commercial product, ``The Velocity Engine for
       Perl'', (http://www.binevolve.com/ or
       http://www.binevolve.com/velocigen/ ) might also be worth
       looking at.  It will allow you to increase the performance
       of your Perl programs, running programs up to 25 times
       faster than normal CGI Perl when running in persistent
       Perl mode or 4 to 5 times faster without any modification
       to your existing CGI programs. Fully functional evaluation
       copies are available from the web site.

       HHooww ccaann II hhiiddee tthhee ssoouurrccee ffoorr mmyy PPeerrll pprrooggrraamm??

       Delete it. :-) Seriously, there are a number of (mostly
       unsatisfactory) solutions with varying levels of ``secu­
       rity''.

       First of all, however, you can't take away read permis­
       sion, because the source code has to be readable in order
       to be compiled and interpreted.  (That doesn't mean that a
       CGI script's source is readable by people on the web,
       though--only by people with access to the filesystem.)  So
       you have to leave the permissions at the socially friendly
       0755 level.

       Some people regard this as a security problem.  If your
       program does insecure things and relies on people not
       knowing how to exploit those insecurities, it is not
       secure.  It is often possible for someone to determine the
       insecure things and exploit them without viewing the
       source.  Security through obscurity, the name for hiding
       your bugs instead of fixing them, is little security
       indeed.

       You can try using encryption via source filters (Filter::*
       from CPAN), but any decent programmer will be able to
       decrypt it.  You can try using the byte code compiler and
       interpreter described below, but the curious might still
       be able to de-compile it.  You can try using the native-
       code compiler described below, but crackers might be able
       to disassemble it.  These pose varying degrees of diffi­
       culty to people wanting to get at your code, but none can
       definitively conceal it (true of every language, not just
       Perl).

       If you're concerned about people profiting from your code,
       then the bottom line is that nothing but a restrictive
       license will give you legal security.  License your soft­
       ware and pepper it with threatening statements like ``This
       is unpublished proprietary software of XYZ Corp.  Your
       access to it does not give you permission to use it blah
       blah blah.''  We are not lawyers, of course, so you should
       see a lawyer if you want to be sure your license's wording
       will stand up in court.

       HHooww ccaann II ccoommppiillee mmyy PPeerrll pprrooggrraamm iinnttoo bbyyttee ccooddee oorr CC??

       Malcolm Beattie has written a multifunction backend com­
       piler, available from CPAN, that can do both these things.
       It is included in the perl5.005 release, but is still con­
       sidered experimental.  This means it's fun to play with if
       you're a programmer but not really for people looking for
       turn-key solutions.

       Merely compiling into C does not in and of itself guaran­
       tee that your code will run very much faster.  That's
       because except for lucky cases where a lot of native type
       inferencing is possible, the normal Perl run-time system
       is still present and so your program will take just as
       long to run and be just as big.  Most programs save little
       more than compilation time, leaving execution no more than
       10-30% faster.  A few rare programs actually benefit sig­
       nificantly (even running several times faster), but this
       takes some tweaking of your code.

       You'll probably be astonished to learn that the current
       version of the compiler generates a compiled form of your
       script whose executable is just as big as the original
       perl executable, and then some.  That's because as cur­
       rently written, all programs are prepared for a full
       eval() statement.  You can tremendously reduce this cost
       by building a shared libperl.so library and linking
       against that.  See the INSTALL podfile in the Perl source
       distribution for details.  If you link your main perl
       binary with this, it will make it minuscule.  For example,
       on one author's system, /usr/bin/perl is only 11k in size!

       In general, the compiler will do nothing to make a Perl
       program smaller, faster, more portable, or more secure.
       In fact, it can make your situation worse.  The executable
       will be bigger, your VM system may take longer to load the
       whole thing, the binary is fragile and hard to fix, and
       compilation never stopped software piracy in the form of
       crackers, viruses, or bootleggers.  The real advantage of
       the compiler is merely packaging, and once you see the
       size of what it makes (well, unless you use a shared
       libperl.so), you'll probably want a complete Perl install
       anyway.

       HHooww ccaann II ccoommppiillee PPeerrll iinnttoo JJaavvaa??

       You can also integrate Java and Perl with the Perl
       Resource Kit from O'Reilly and Associates.  See
       http://www.oreilly.com/catalog/prkunix/ .

       Perl 5.6 comes with Java Perl Lingo, or JPL.  JPL, still
       in development, allows Perl code to be called from Java.
       See jpl/README in the Perl source tree.

       HHooww ccaann II ggeett ""##!!ppeerrll"" ttoo wwoorrkk oonn [[MMSS--DDOOSS,,NNTT,,......]]??

       For OS/2 just use

           extproc perl -S -your_switches

       as the first line in "*.cmd" file ("-S" due to a bug in
       cmd.exe's `extproc' handling).  For DOS one should first
       invent a corresponding batch file and codify it in "ALTER­
       NATIVE_SHEBANG" (see the INSTALL file in the source dis­
       tribution for more information).

       The Win95/NT installation, when using the ActiveState port
       of Perl, will modify the Registry to associate the ".pl"
       extension with the perl interpreter.  If you install
       another port, perhaps even building your own Win95/NT Perl
       from the standard sources by using a Windows port of gcc
       (e.g., with cygwin or mingw32), then you'll have to modify
       the Registry yourself.  In addition to associating ".pl"
       with the interpreter, NT people can use: "SET
       PATHEXT=%PATHEXT%;.PL" to let them run the program
       "install-linux.pl" merely by typing "install-linux".

       Macintosh Perl programs will have the appropriate Creator
       and Type, so that double-clicking them will invoke the
       Perl application.

       IMPORTANT!: Whatever you do, PLEASE don't get frustrated,
       and just throw the perl interpreter into your cgi-bin
       directory, in order to get your programs working for a web
       server.  This is an EXTREMELY big security risk.  Take the
       time to figure out how to do it correctly.

       CCaann II wwrriittee uusseeffuull PPeerrll pprrooggrraammss oonn tthhee ccoommmmaanndd lliinnee??

       Yes.  Read the perlrun manpage for more information.  Some
       examples follow.  (These assume standard Unix shell quot­
       ing rules.)

           # sum first and last fields
           perl -lane 'print $F[0] + $F[-1]' *

           # identify text files
           perl -le 'for(@ARGV) {print if -f && -T _}' *

           # remove (most) comments from C program
           perl -0777 -pe 's{/\*.*?\*/}{}gs' foo.c

           # make file a month younger than today, defeating reaper daemons
           perl -e '$X=24*60*60; utime(time(),time() + 30 * $X,@ARGV)' *

           # find first unused uid
           perl -le '$i++ while getpwuid($i); print $i'

           # display reasonable manpath
           echo $PATH | perl -nl -072 -e '
               s![^/+]*$!man!&&-d&&!$s{$_}++&&push@m,$_;END{print"@m"}'

       OK, the last one was actually an Obfuscated Perl Contest
       entry. :-)




       WWhhyy ddoonn''tt PPeerrll oonnee--lliinneerrss wwoorrkk oonn mmyy DDOOSS//MMaacc//VVMMSS ssyysstteemm??

       The problem is usually that the command interpreters on
       those systems have rather different ideas about quoting
       than the Unix shells under which the one-liners were cre­
       ated.  On some systems, you may have to change single-
       quotes to double ones, which you must NOT do on Unix or
       Plan9 systems.  You might also have to change a single %
       to a %%.

       For example:

           # Unix
           perl -e 'print "Hello world\n"'

           # DOS, etc.
           perl -e "print \"Hello world\n\""

           # Mac
           print "Hello world\n"
            (then Run "Myscript" or Shift-Command-R)

           # VMS
           perl -e "print ""Hello world\n"""

       The problem is that none of these examples are reliable:
       they depend on the command interpreter.  Under Unix, the
       first two often work. Under DOS, it's entirely possible
       that neither works.  If 4DOS was the command shell, you'd
       probably have better luck like this:

         perl -e "print <Ctrl-x>"Hello world\n<Ctrl-x>""

       Under the Mac, it depends which environment you are using.
       The MacPerl shell, or MPW, is much like Unix shells in its
       support for several quoting variants, except that it makes
       free use of the Mac's non-ASCII characters as control
       characters.

       Using qq(), q(), and qx(), instead of "double quotes",
       'single quotes', and `backticks`, may make one-liners eas­
       ier to write.

       There is no general solution to all of this.  It is a
       mess, pure and simple.  Sucks to be away from Unix, huh?
       :-)

       [Some of this answer was contributed by Kenneth
       Albanowski.]

       WWhheerree ccaann II lleeaarrnn aabboouutt CCGGII oorr WWeebb pprrooggrraammmmiinngg iinn PPeerrll??

       For modules, get the CGI or LWP modules from CPAN.  For
       textbooks, see the two especially dedicated to web stuff
       in the question on books.  For problems and questions
       related to the web, like ``Why do I get 500 Errors'' or
       ``Why doesn't it run from the browser right when it runs
       fine on the command line'', see these sources:

           WWW Security FAQ
               http://www.w3.org/Security/Faq/

           Web FAQ
               http://www.boutell.com/faq/

           CGI FAQ
               http://www.webthing.com/tutorials/cgifaq.html

           HTTP Spec
               http://www.w3.org/pub/WWW/Protocols/HTTP/

           HTML Spec
               http://www.w3.org/TR/REC-html40/
               http://www.w3.org/pub/WWW/MarkUp/

           CGI Spec
               http://www.w3.org/CGI/

           CGI Security FAQ
               http://www.go2net.com/people/paulp/cgi-security/safe-cgi.txt


       WWhheerree ccaann II lleeaarrnn aabboouutt oobbjjeecctt--oorriieenntteedd PPeerrll pprrooggrraammmmiinngg??

       A good place to start is the perltoot manpage, and you can
       use the perlobj manpage, the perlboot manpage, and the
       perlbot manpage for reference.  Perltoot didn't come out
       until the 5.004 release; you can get a copy (in pod, html,
       or postscript) from
       http://www.perl.com/CPAN/doc/FMTEYEWTK/ .

       WWhheerree ccaann II lleeaarrnn aabboouutt lliinnkkiinngg CC wwiitthh PPeerrll?? [[hh22xxss,,
       xxssuubbpppp]]

       If you want to call C from Perl, start with the perlxstut
       manpage, moving on to the perlxs manpage, the xsubpp man­
       page, and the perlguts manpage.  If you want to call Perl
       from C, then read the perlembed manpage, the perlcall man­
       page, and the perlguts manpage.  Don't forget that you can
       learn a lot from looking at how the authors of existing
       extension modules wrote their code and solved their prob­
       lems.

       II''vvee rreeaadd ppeerrlleemmbbeedd,, ppeerrllgguuttss,, eettcc..,, bbuutt II ccaann''tt eemmbbeedd
       ppeerrll iinn mmyy CC pprrooggrraamm;; wwhhaatt aamm II ddooiinngg wwrroonngg??

       Download the ExtUtils::Embed kit from CPAN and run `make
       test'.  If the tests pass, read the pods again and again
       and again.  If they fail, see the perlbug manpage and send
       a bug report with the output of "make test TEST_VERBOSE=1"
       along with "perl -V".

       WWhheenn II ttrriieedd ttoo rruunn mmyy ssccrriipptt,, II ggoott tthhiiss mmeessssaaggee.. WWhhaatt
       ddooeess iitt mmeeaann??

       A complete list of Perl's error messages and warnings with
       explanatory text can be found in the perldiag manpage. You
       can also use the splain program (distributed with Perl) to
       explain the error messages:

           perl program 2>diag.out
           splain [-v] [-p] diag.out

       or change your program to explain the messages for you:

           use diagnostics;

       or

           use diagnostics -verbose;


       WWhhaatt''ss MMaakkeeMMaakkeerr??

       This module (part of the standard Perl distribution) is
       designed to write a Makefile for an extension module from
       a Makefile.PL.  For more information, see the ExtU­
       tils::MakeMaker manpage.

AAUUTTHHOORR AANNDD CCOOPPYYRRIIGGHHTT
       Copyright (c) 1997-1999 Tom Christiansen and Nathan Tork­
       ington.  All rights reserved.

       When included as an integrated part of the Standard Dis­
       tribution of Perl or of its documentation (printed or oth­
       erwise), this works is covered under Perl's Artistic
       License.  For separate distributions of all or part of
       this FAQ outside of that, see the perlfaq manpage.

       Irrespective of its distribution, all code examples here
       are in the public domain.  You are permitted and encour­
       aged to use this code and any derivatives thereof in your
       own programs for fun or for profit as you see fit.  A sim­
       ple comment in the code giving credit to the FAQ would be
       courteous but is not required.



2001-04-08                 perl v5.6.1                PERLFAQ3(1)
