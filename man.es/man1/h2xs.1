H2XS(1)          Perl Programmers Reference Guide         H2XS(1)



NNAAMMEE
       h2xs - convert .h C header files to Perl extensions

SSYYNNOOPPSSIISS
       hh22xxss [--AACCOOPPXXaaccddffkkmmxx] [--FF addflags] [--MM fmask] [--nn mod­
       ule_name] [--oo tmask] [--pp prefix] [--ss subs] [--vv version]
       [headerfile ... [extra_libraries]]

       hh22xxss --hh

DDEESSCCRRIIPPTTIIOONN
       h2xs builds a Perl extension from C header files.  The
       extension will include functions which can be used to
       retrieve the value of any #define statement which was in
       the C header files.

       The module_name will be used for the name of the exten­
       sion.  If module_name is not supplied then the name of the
       first header file will be used, with the first character
       capitalized.

       If the extension might need extra libraries, they should
       be included here.  The extension Makefile.PL will take
       care of checking whether the libraries actually exist and
       how they should be loaded.  The extra libraries should be
       specified in the form -lm -lposix, etc, just as on the cc
       command line.  By default, the Makefile.PL will search
       through the library path determined by Configure.  That
       path can be augmented by including arguments of the form
       --LL//aannootthheerr//lliibbrraarryy//ppaatthh in the extra-libraries argument.

OOPPTTIIOONNSS
       --AA   Omit all autoload facilities.  This is the same as --cc
            but also removes the "use AutoLoader" statement from
            the .pm file.

       --CC   Omits creation of the Changes file, and adds a HIS­
            TORY section to the POD template.

       --FF addflags
            Additional flags to specify to C preprocessor when
            scanning header for function declarations.  Should
            not be used without --xx.

       --MM regular expression
            selects functions/macros to process.

       --OO   Allows a pre-existing extension directory to be over­
            written.

       --PP   Omit the autogenerated stub POD section.

       --XX   Omit the XS portion.  Used to generate templates for
            a module which is not XS-based.  "-c" and "-f" are
            implicitly enabled.

       --aa   Generate an accessor method for each element of
            structs and unions. The generated methods are named
            after the element name; will return the current value
            of the element if called without additional argu­
            ments; and will set the element to the supplied value
            (and return the new value) if called with an
            additional argument. Embedded structures and unions
            are returned as a pointer rather than the complete
            structure, to facilitate chained calls.

            These methods all apply to the Ptr type for the
            structure; additionally two methods are constructed
            for the structure type itself, "_to_ptr" which
            returns a Ptr type pointing to the same structure,
            and a "new" method to construct and return a new
            structure, initialised to zeroes.

       --cc   Omit "constant()" from the .xs file and corresponding
            specialised "AUTOLOAD" from the .pm file.

       --dd   Turn on debugging messages.

       --ff   Allows an extension to be created for a header even
            if that header is not found in standard include
            directories.

       --hh   Print the usage, help and version for this h2xs and
            exit.

       --kk   For function arguments declared as "const", omit the
            const attribute in the generated XS code.

       --mm   EExxppeerriimmeennttaall: for each variable declared in the
            header file(s), declare a perl variable of the same
            name magically tied to the C variable.

       --nn module_name
            Specifies a name to be used for the extension, e.g.,
            -n RPC::DCE

       --oo regular expression
            Use "opaque" data type for the C types matched by the
            regular expression, even if these types are "type­
            def"-equivalent to types from typemaps.  Should not
            be used without --xx.

            This may be useful since, say, types which are "type­
            def"-equivalent to integers may represent OS-related
            handles, and one may want to work with these handles
            in OO-way, as in "$handle->do_something()".  Use "-o
            ." if you want to handle all the "typedef"ed types as
            opaque types.

            The type-to-match is whitewashed (except for commas,
            which have no whitespace before them, and multiple
            "*" which have no whitespace between them).

       --pp prefix
            Specify a prefix which should be removed from the
            Perl function names, e.g., -p sec_rgy_ This sets up
            the XS PPRREEFFIIXX keyword and removes the prefix from
            functions that are autoloaded via the "constant()"
            mechanism.

       --ss sub1,sub2
            Create a perl subroutine for the specified macros
            rather than autoload with the constant() subroutine.
            These macros are assumed to have a return type of
            cchhaarr **, e.g., -s sec_rgy_wildcard_name,sec_rgy_wild­
            card_sid.



       --vv version
            Specify a version number for this extension.  This
            version number is added to the templates.  The
            default is 0.01.

       --xx   Automatically generate XSUBs basing on function dec­
            larations in the header file.  The package "C::Scan"
            should be installed. If this option is specified, the
            name of the header file may look like "NAME1,NAME2".
            In this case NAME1 is used instead of the specified
            string, but XSUBs are emitted only for the declara­
            tions included from file NAME2.

            Note that some types of arguments/return-values for
            functions may result in XSUB-declarations/typemap-
            entries which need hand-editing. Such may be objects
            which cannot be converted from/to a pointer (like
            "long long"), pointers to functions, or arrays.  See
            also the section on the LIMITATIONS of --xx entry else­
            where in this document.

       --bb version
            Generates a .pm file which is backwards compatible
            with the specified perl version.

            For versions < 5.6.0, the changes are.
                - no use of 'our' (uses 'use vars' instead)
                - no 'use warnings'

            Specifying a compatibility version higher than the
            version of perl you are using to run h2xs will have
            no effect.

EEXXAAMMPPLLEESS
               # Default behavior, extension is Rusers
               h2xs rpcsvc/rusers

               # Same, but extension is RUSERS
               h2xs -n RUSERS rpcsvc/rusers

               # Extension is rpcsvc::rusers. Still finds <rpcsvc/rusers.h>
               h2xs rpcsvc::rusers

               # Extension is ONC::RPC.  Still finds <rpcsvc/rusers.h>
               h2xs -n ONC::RPC rpcsvc/rusers

               # Without constant() or AUTOLOAD
               h2xs -c rpcsvc/rusers

               # Creates templates for an extension named RPC
               h2xs -cfn RPC

               # Extension is ONC::RPC.
               h2xs -cfn ONC::RPC

               # Makefile.PL will look for library -lrpc in
               # additional directory /opt/net/lib
               h2xs rpcsvc/rusers -L/opt/net/lib -lrpc

               # Extension is DCE::rgynbase
               # prefix "sec_rgy_" is dropped from perl function names
               h2xs -n DCE::rgynbase -p sec_rgy_ dce/rgynbase



               # Extension is DCE::rgynbase
               # prefix "sec_rgy_" is dropped from perl function names
               # subroutines are created for sec_rgy_wildcard_name and sec_rgy_wildcard_sid
               h2xs -n DCE::rgynbase -p sec_rgy_ \
               -s sec_rgy_wildcard_name,sec_rgy_wildcard_sid dce/rgynbase

               # Make XS without defines in perl.h, but with function declarations
               # visible from perl.h. Name of the extension is perl1.
               # When scanning perl.h, define -DEXT=extern -DdEXT= -DINIT(x)=
               # Extra backslashes below because the string is passed to shell.
               # Note that a directory with perl header files would
               #  be added automatically to include path.
               h2xs -xAn perl1 -F "-DEXT=extern -DdEXT= -DINIT\(x\)=" perl.h

               # Same with function declaration in proto.h as visible from perl.h.
               h2xs -xAn perl2 perl.h,proto.h

               # Same but select only functions which match /^av_/
               h2xs -M '^av_' -xAn perl2 perl.h,proto.h

               # Same but treat SV* etc as "opaque" types
               h2xs -o '^[S]V \*$' -M '^av_' -xAn perl2 perl.h,proto.h


       EExxtteennssiioonn bbaasseedd oonn .h aanndd .c ffiilleess

       Suppose that you have some C files implementing some func­
       tionality, and the corresponding header files.  How to
       create an extension which makes this functionality access­
       able in Perl?  The example below assumes that the header
       files are interface_simple.h and interface_hairy.h, and
       you want the perl module be named as "Ext::Ension".  If
       you need some preprocessor directives and/or linking with
       external libraries, see the flags "-F", "-L" and "-l" in
       the section on "OPTIONS".

       Find the directory name
           Start with a dummy run of h2xs:

             h2xs -Afn Ext::Ension

           The only purpose of this step is to create the needed
           directories, and let you know the names of these
           directories.  From the output you can see that the
           directory for the extension is Ext/Ension.

       Copy C files
           Copy your header files and C files to this directory
           Ext/Ension.

       Create the extension
           Run h2xs, overwriting older autogenerated files:

             h2xs -Oxan Ext::Ension interface_simple.h interface_hairy.h

           h2xs looks for header files after changing to the
           extension directory, so it will find your header files
           OK.

       Archive and test
           As usual, run





             cd Ext/Ension
             perl Makefile.PL
             make dist
             make
             make test


       Hints
           It is important to do "make dist" as early as possi­
           ble.  This way you can easily merge(1) your changes to
           autogenerated files if you decide to edit your ".h"
           files and rerun h2xs.

           Do not forget to edit the documentation in the gener­
           ated .pm file.

           Consider the autogenerated files as skeletons only,
           you may invent better interfaces than what h2xs could
           guess.

           Consider this section as a guideline only, some other
           options of h2xs may better suit your needs.

EENNVVIIRROONNMMEENNTT
       No environment variables are used.

AAUUTTHHOORR
       Larry Wall and others

SSEEEE AALLSSOO
       the perl manpage, the perlxstut manpage, the ExtU­
       tils::MakeMaker manpage, and the AutoLoader manpage.

DDIIAAGGNNOOSSTTIICCSS
       The usual warnings if it cannot read or write the files
       involved.

LLIIMMIITTAATTIIOONNSS ooff --xx
       h2xs would not distinguish whether an argument to a C
       function which is of the form, say, "int *", is an input,
       output, or input/output parameter.  In particular, argu­
       ment declarations of the form

           int
           foo(n)
               int *n

       should be better rewritten as

           int
           foo(n)
               int &n

       if "n" is an input parameter.

       Additionally, h2xs has no facilities to intuit that a
       function

          int
          foo(addr,l)
               char *addr
               int   l

       takes a pair of address and length of data at this
       address, so it is better to rewrite this function as

           int
           foo(sv)
                   SV *addr
               PREINIT:
                   STRLEN len;
                   char *s;
               CODE:
                   s = SvPV(sv,len);
                   RETVAL = foo(s, len);
               OUTPUT:
                   RETVAL

       or alternately

           static int
           my_foo(SV *sv)
           {
               STRLEN len;
               char *s = SvPV(sv,len);

               return foo(s, len);
           }

           MODULE = foo        PACKAGE = foo   PREFIX = my_

           int
           foo(sv)
               SV *sv

       See the perlxs manpage and the perlxstut manpage for addi­
       tional details.



2002-02-21                 perl v5.6.1                    H2XS(1)
