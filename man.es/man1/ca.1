CA(1)                        OpenSSL                        CA(1)



NNAAMMEE
       ca - sample minimal CA application

SSYYNNOOPPSSIISS
       ooppeennssssll ccaa [--vveerrbboossee] [--ccoonnffiigg ffiilleennaammee] [--nnaammee sseeccttiioonn]
       [--ggeennccrrll] [--rreevvookkee ffiillee] [--ccrrllddaayyss ddaayyss] [--ccrrllhhoouurrss hhoouurrss]
       [--ccrrlleexxttss sseeccttiioonn] [--ssttaarrttddaattee ddaattee] [--eennddddaattee ddaattee]
       [--ddaayyss aarrgg] [--mmdd aarrgg] [--ppoolliiccyy aarrgg] [--kkeeyyffiillee aarrgg] [--kkeeyy
       aarrgg] [--ppaassssiinn aarrgg] [--cceerrtt ffiillee] [--iinn ffiillee] [--oouutt ffiillee]
       [--nnootteexxtt] [--oouuttddiirr ddiirr] [--iinnffiilleess] [--ssppkkaacc ffiillee] [--ssss_cceerrtt
       ffiillee] [--pprreesseerrvveeDDNN] [--bbaattcchh] [--mmssiiee_hhaacckk] [--eexxtteennssiioonnss
       sseeccttiioonn]

DDEESSCCRRIIPPTTIIOONN
       The ccaa command is a minimal CA application. It can be used
       to sign certificate requests in a variety of forms and
       generate CRLs it also maintains a text database of issued
       certificates and their status.

       The options descriptions will be divided into each
       purpose.

CCAA OOPPTTIIOONNSS
       --ccoonnffiigg ffiilleennaammee
           specifies the configuration file to use.

       --nnaammee sseeccttiioonn
           specifies the configuration file section to use
           (overrides ddeeffaauulltt_ccaa in the ccaa section).

       --iinn ffiilleennaammee
           an input filename containing a single certificate
           request to be signed by the CA.

       --ssss_cceerrtt ffiilleennaammee
           a single self signed certificate to be signed by the
           CA.

       --ssppkkaacc ffiilleennaammee
           a file containing a single Netscape signed public key
           and challenge and additional field values to be signed
           by the CA. See the NNOOTTEESS section for information on
           the required format.

       --iinnffiilleess
           if present this should be the last option, all
           subsequent arguments are assumed to the the names of
           files containing certificate requests.

       --oouutt ffiilleennaammee
           the output file to output certificates to. The default
           is standard output. The certificate details will also
           be printed out to this file.

       --oouuttddiirr ddiirreeccttoorryy
           the directory to output certificates to. The
           certificate will be written to a filename consisting
           of the serial number in hex with ".pem" appended.

       --cceerrtt
           the CA certificate file.


       --kkeeyyffiillee ffiilleennaammee
           the private key to sign requests with.

       --kkeeyy ppaasssswwoorrdd
           the password used to encrypt the private key. Since on
           some systems the command line arguments are visible
           (e.g. Unix with the 'ps' utility) this option should
           be used with caution.

       --ppaassssiinn aarrgg
           the key password source. For more information about
           the format of aarrgg see the PPAASSSS PPHHRRAASSEE AARRGGUUMMEENNTTSS
           section in openssl(1).  =item --vveerrbboossee

           this prints extra details about the operations being
           performed.

       --nnootteexxtt
           don't output the text form of a certificate to the
           output file.

       --ssttaarrttddaattee ddaattee
           this allows the start date to be explicitly set. The
           format of the date is YYMMDDHHMMSSZ (the same as an
           ASN1 UTCTime structure).

       --eennddddaattee ddaattee
           this allows the expiry date to be explicitly set. The
           format of the date is YYMMDDHHMMSSZ (the same as an
           ASN1 UTCTime structure).

       --ddaayyss aarrgg
           the number of days to certify the certificate for.

       --mmdd aallgg
           the message digest to use. Possible values include
           md5, sha1 and mdc2.  This option also applies to CRLs.

       --ppoolliiccyy aarrgg
           this option defines the CA "policy" to use. This is a
           section in the configuration file which decides which
           fields should be mandatory or match the CA
           certificate. Check out the PPOOLLIICCYY FFOORRMMAATT section for
           more information.

       --mmssiiee_hhaacckk
           this is a legacy option to make ccaa work with very old
           versions of the IE certificate enrollment control
           "certenr3". It used UniversalStrings for almost
           everything. Since the old control has various security
           bugs its use is strongly discouraged. The newer
           control "Xenroll" does not need this option.

       --pprreesseerrvveeDDNN
           Normally the DN order of a certificate is the same as
           the order of the fields in the relevant policy
           section. When this option is set the order is the same
           as the request. This is largely for compatibility with
           the older IE enrollment control which would only
           accept certificates if their DNs match the order of
           the request. This is not needed for Xenroll.

       --bbaattcchh
           this sets the batch mode. In this mode no questions
           will be asked and all certificates will be certified
           automatically.

       --eexxtteennssiioonnss sseeccttiioonn
           the section of the configuration file containing
           certificate extensions to be added when a certificate
           is issued. If no extension section is present then a
           V1 certificate is created. If the extension section is
           present (even if it is empty) then a V3 certificate is
           created.

CCRRLL OOPPTTIIOONNSS
       --ggeennccrrll
           this option generates a CRL based on information in
           the index file.

       --ccrrllddaayyss nnuumm
           the number of days before the next CRL is due. That is
           the days from now to place in the CRL nextUpdate
           field.

       --ccrrllhhoouurrss nnuumm
           the number of hours before the next CRL is due.

       --rreevvookkee ffiilleennaammee
           a filename containing a certificate to revoke.

       --ccrrlleexxttss sseeccttiioonn
           the section of the configuration file containing CRL
           extensions to include. If no CRL extension section is
           present then a V1 CRL is created, if the CRL extension
           section is present (even if it is empty) then a V2 CRL
           is created. The CRL extensions specified are CRL
           extensions and nnoott CRL entry extensions.  It should be
           noted that some software (for example Netscape) can't
           handle V2 CRLs.

CCOONNFFIIGGUURRAATTIIOONN FFIILLEE OOPPTTIIOONNSS
       The section of the configuration file containing options
       for ccaa is found as follows: If the --nnaammee command line
       option is used, then it names the section to be used.
       Otherwise the section to be used must be named in the
       ddeeffaauulltt_ccaa option of the ccaa section of the configuration
       file (or in the default section of the configuration
       file). Besides ddeeffaauulltt_ccaa, the following options are read
       directly from the ccaa section:
        RANDFILE
        preserve
        msie_hack With the exception of RRAANNDDFFIILLEE, this is
       probably a bug and may change in future releases.

       Many of the configuration file options are identical to
       command line options. Where the option is present in the
       configuration file and the command line the command line
       value is used. Where an option is described as mandatory
       then it must be present in the configuration file or the
       command line equivalent (if any) used.

       ooiidd_ffiillee
           This specifies a file containing additional OOBBJJEECCTT
           IIDDEENNTTIIFFIIEERRSS.  Each line of the file should consist of
           the numerical form of the object identifier followed
           by white space then the short name followed by white
           space and finally the long name.

       ooiidd_sseeccttiioonn
           This specifies a section in the configuration file
           containing extra object identifiers. Each line should
           consist of the short name of the object identifier
           followed by == and the numerical form. The short and
           long names are the same when this option is used.

       nneeww_cceerrttss_ddiirr
           the same as the --oouuttddiirr command line option. It
           specifies the directory where new certificates will be
           placed. Mandatory.

       cceerrttiiffiiccaattee
           the same as --cceerrtt. It gives the file containing the CA
           certificate. Mandatory.

       pprriivvaattee_kkeeyy
           same as the --kkeeyyffiillee option. The file containing the
           CA private key. Mandatory.

       RRAANNDDFFIILLEE
           a file used to read and write random number seed
           information, or an EGD socket (see RAND_egd(3)).

       ddeeffaauulltt_ddaayyss
           the same as the --ddaayyss option. The number of days to
           certify a certificate for.

       ddeeffaauulltt_ssttaarrttddaattee
           the same as the --ssttaarrttddaattee option. The start date to
           certify a certificate for. If not set the current time
           is used.

       ddeeffaauulltt_eennddddaattee
           the same as the --eennddddaattee option. Either this option or
           ddeeffaauulltt_ddaayyss (or the command line equivalents) must be
           present.

       ddeeffaauulltt_ccrrll_hhoouurrss ddeeffaauulltt_ccrrll_ddaayyss
           the same as the --ccrrllhhoouurrss and the --ccrrllddaayyss options.
           These will only be used if neither command line option
           is present. At least one of these must be present to
           generate a CRL.

       ddeeffaauulltt_mmdd
           the same as the --mmdd option. The message digest to use.
           Mandatory.

       ddaattaabbaassee
           the text database file to use. Mandatory. This file
           must be present though initially it will be empty.

       sseerriiaallffiillee
           a text file containing the next serial number to use
           in hex. Mandatory.  This file must be present and
           contain a valid serial number.

       xx550099_eexxtteennssiioonnss
           the same as --eexxtteennssiioonnss.

       ccrrll_eexxtteennssiioonnss
           the same as --ccrrlleexxttss.

       pprreesseerrvvee
           the same as --pprreesseerrvveeDDNN

       mmssiiee_hhaacckk
           the same as --mmssiiee_hhaacckk

       ppoolliiccyy
           the same as --ppoolliiccyy. Mandatory. See the PPOOLLIICCYY FFOORRMMAATT
           section for more information.

PPOOLLIICCYY FFOORRMMAATT
       The policy section consists of a set of variables
       corresponding to certificate DN fields. If the value is
       "match" then the field value must match the same field in
       the CA certificate. If the value is "supplied" then it
       must be present. If the value is "optional" then it may be
       present. Any fields not mentioned in the policy section
       are silently deleted, unless the --pprreesseerrvveeDDNN option is set
       but this can be regarded more of a quirk than intended
       behaviour.

SSPPKKAACC FFOORRMMAATT
       The input to the --ssppkkaacc command line option is a Netscape
       signed public key and challenge. This will usually come
       from the KKEEYYGGEENN tag in an HTML form to create a new
       private key.  It is however possible to create SPKACs
       using the ssppkkaacc utility.

       The file should contain the variable SPKAC set to the
       value of the SPKAC and also the required DN components as
       name value pairs.  If you need to include the same
       component twice then it can be preceded by a number and a
       '.'.

EEXXAAMMPPLLEESS
       Note: these examples assume that the ccaa directory
       structure is already set up and the relevant files already
       exist. This usually involves creating a CA certificate and
       private key with rreeqq, a serial number file and an empty
       index file and placing them in the relevant directories.

       To use the sample configuration file below the directories
       demoCA, demoCA/private and demoCA/newcerts would be
       created. The CA certificate would be copied to
       demoCA/cacert.pem and its private key to
       demoCA/private/cakey.pem. A file demoCA/serial would be
       created containing for example "01" and the empty index
       file demoCA/index.txt.

       Sign a certificate request:

        openssl ca -in req.pem -out newcert.pem

       Sign a certificate request, using CA extensions:

        openssl ca -in req.pem -extensions v3_ca -out newcert.pem

       Generate a CRL

        openssl ca -gencrl -out crl.pem

       Sign several requests:

        openssl ca -infiles req1.pem req2.pem req3.pem

       Certify a Netscape SPKAC:

        openssl ca -spkac spkac.txt

       A sample SPKAC file (the SPKAC line has been truncated for
       clarity):

        SPKAC=MIG0MGAwXDANBgkqhkiG9w0BAQEFAANLADBIAkEAn7PDhCeV/xIxUg8V70YRxK2A5
        CN=Steve Test
        emailAddress=steve@openssl.org
        0.OU=OpenSSL Group
        1.OU=Another Group

       A sample configuration file with the relevant sections for
       ccaa:

        [ ca ]
        default_ca      = CA_default            # The default ca section

        [ CA_default ]

        dir            = ./demoCA              # top dir
        database       = $dir/index.txt        # index file.
        new_certs_dir  = $dir/newcerts         # new certs dir

        certificate    = $dir/cacert.pem       # The CA cert
        serial         = $dir/serial           # serial no file
        private_key    = $dir/private/cakey.pem# CA private key
        RANDFILE       = $dir/private/.rand    # random number file

        default_days   = 365                   # how long to certify for
        default_crl_days= 30                   # how long before next CRL
        default_md     = md5                   # md to use

        policy         = policy_any            # default policy

        [ policy_any ]
        countryName            = supplied
        stateOrProvinceName    = optional
        organizationName       = optional
        organizationalUnitName = optional
        commonName             = supplied
        emailAddress           = optional


WWAARRNNIINNGGSS
       The ccaa command is quirky and at times downright
       unfriendly.

       The ccaa utility was originally meant as an example of how
       to do things in a CA. It was not supposed be be used as a
       full blown CA itself: nevertheless some people are using
       it for this purpose.

       The ccaa command is effectively a single user command: no
       locking is done on the various files and attempts to run
       more than one ccaa command on the same database can have
       unpredictable results.

FFIILLEESS
       Note: the location of all files can change either by
       compile time options, configuration file entries,
       environment variables or command line options.  The values
       below reflect the default values.








        /usr/local/ssl/lib/openssl.cnf - master configuration file
        ./demoCA                       - main CA directory
        ./demoCA/cacert.pem            - CA certificate
        ./demoCA/private/cakey.pem     - CA private key
        ./demoCA/serial                - CA serial number file
        ./demoCA/serial.old            - CA serial number backup file
        ./demoCA/index.txt             - CA text database file
        ./demoCA/index.txt.old         - CA text database backup file
        ./demoCA/certs                 - certificate output file
        ./demoCA/.rnd                  - CA random seed information


EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
       OOPPEENNSSSSLL_CCOONNFF reflects the location of master configuration
       file it can be overridden by the --ccoonnffiigg command line
       option.

RREESSTTRRIICCTTIIOONNSS
       The text database index file is a critical part of the
       process and if corrupted it can be difficult to fix. It is
       theoretically possible to rebuild the index file from all
       the issued certificates and a current CRL: however there
       is no option to do this.

       CRL entry extensions cannot currently be created: only CRL
       extensions can be added.

       V2 CRL features like delta CRL support and CRL numbers are
       not currently supported.

       Although several requests can be input and handled at once
       it is only possible to include one SPKAC or self signed
       certificate.

BBUUGGSS
       The use of an in memory text database can cause problems
       when large numbers of certificates are present because, as
       the name implies the database has to be kept in memory.

       Certificate request extensions are ignored: some kind of
       "policy" should be included to use certain static
       extensions and certain extensions from the request.

       It is not possible to certify two certificates with the
       same DN: this is a side effect of how the text database is
       indexed and it cannot easily be fixed without introducing
       other problems. Some S/MIME clients can use two
       certificates with the same DN for separate signing and
       encryption keys.

       The ccaa command really needs rewriting or the required
       functionality exposed at either a command or interface
       level so a more friendly utility (perl script or GUI) can
       handle things properly. The scripts CCAA..sshh and CCAA..ppll help a
       little but not very much.

       Any fields in a request that are not present in a policy
       are silently deleted. This does not happen if the
       --pprreesseerrvveeDDNN option is used but the extra fields are not
       displayed when the user is asked to certify a request. The
       behaviour should be more friendly and configurable.

       Cancelling some commands by refusing to certify a
       certificate can create an empty file.

SSEEEE AALLSSOO
       req(1), spkac(1), x509(1), CA.pl(1), config(5)

































































26/Nov/2001                   0.9.6c                        CA(1)
