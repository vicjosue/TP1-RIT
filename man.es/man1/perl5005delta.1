PERL5005DELTA(1) Perl Programmers Reference GuidePERL5005DELTA(1)



NNAAMMEE
       perldelta - what's new for perl5.005

DDEESSCCRRIIPPTTIIOONN
       This document describes differences between the 5.004
       release and this one.

AAbboouutt tthhee nneeww vveerrssiioonniinngg ssyysstteemm
       Perl is now developed on two tracks: a maintenance track
       that makes small, safe updates to released production ver­
       sions with emphasis on compatibility; and a development
       track that pursues more aggressive evolution.  Maintenance
       releases (which should be considered production quality)
       have subversion numbers that run from "1" to "49", and
       development releases (which should be considered "alpha"
       quality) run from "50" to "99".

       Perl 5.005 is the combined product of the new dual-track
       development scheme.

IInnccoommppaattiibbllee CChhaannggeess
       WWAARRNNIINNGG::  TThhiiss vveerrssiioonn iiss nnoott bbiinnaarryy ccoommppaattiibbllee wwiitthh PPeerrll
       55..000044..

       Starting with Perl 5.004_50 there were many deep and far-
       reaching changes to the language internals.  If you have
       dynamically loaded extensions that you built under perl
       5.003 or 5.004, you can continue to use them with 5.004,
       but you will need to rebuild and reinstall those exten­
       sions to use them 5.005.  See INSTALL for detailed
       instructions on how to upgrade.

       DDeeffaauulltt iinnssttaallllaattiioonn ssttrruuccttuurree hhaass cchhaannggeedd

       The new Configure defaults are designed to allow a smooth
       upgrade from 5.004 to 5.005, but you should read INSTALL
       for a detailed discussion of the changes in order to adapt
       them to your system.

       PPeerrll SSoouurrccee CCoommppaattiibbiilliittyy

       When none of the experimental features are enabled, there
       should be very few user-visible Perl source compatibility
       issues.

       If threads are enabled, then some caveats apply. "@_" and
       "$_" become lexical variables.  The effect of this should
       be largely transparent to the user, but there are some
       boundary conditions under which user will need to be aware
       of the issues.  For example, "local(@_)" results in a
       "Can't localize lexical variable @_ ..." message.  This
       may be enabled in a future version.

       Some new keywords have been introduced.  These are gener­
       ally expected to have very little impact on compatibility.
       See the New "INIT" keyword entry elsewhere in this docu­
       ment, the New "lock" keyword entry elsewhere in this docu­
       ment, and the section on "/" operator" in the New "qr man­
       page.

       Certain barewords are now reserved.  Use of these will
       provoke a warning if you have asked for them with the "-w"
       switch.  See the section on ""our" is now a reserved
       word".

       CC SSoouurrccee CCoommppaattiibbiilliittyy

       There have been a large number of changes in the internals
       to support the new features in this release.

       ·   Core sources now require ANSI C compiler

           An ANSI C compiler is now rreeqquuiirreedd to build perl.  See
           INSTALL.

       ·   All Perl global variables must now be referenced with
           an explicit prefix

           All Perl global variables that are visible for use by
           extensions now have a "PL_" prefix.  New extensions
           should "not" refer to perl globals by their unquali­
           fied names.  To preserve sanity, we provide limited
           backward compatibility for globals that are being
           widely used like "sv_undef" and "na" (which should now
           be written as "PL_sv_undef", "PL_na" etc.)

           If you find that your XS extension does not compile
           anymore because a perl global is not visible, try
           adding a "PL_" prefix to the global and rebuild.

           It is strongly recommended that all functions in the
           Perl API that don't begin with "perl" be referenced
           with a "Perl_" prefix.  The bare function names with­
           out the "Perl_" prefix are supported with macros, but
           this support may cease in a future release.

           See the API LISTING entry in the perlguts manpage.

       ·   Enabling threads has source compatibility issues

           Perl built with threading enabled requires extensions
           to use the new "dTHR" macro to initialize the handle
           to access per-thread data.  If you see a compiler
           error that talks about the variable "thr" not being
           declared (when building a module that has XS code),
           you need to add "dTHR;" at the beginning of the block
           that elicited the error.

           The API function "perl_get_sv("@",FALSE)" should be
           used instead of directly accessing perl globals as
           "GvSV(errgv)".  The API call is backward compatible
           with existing perls and provides source compatibility
           with threading is enabled.

           See the section on "C Source Compatibility" for more
           information.

       BBiinnaarryy CCoommppaattiibbiilliittyy

       This version is NOT binary compatible with older versions.
       All extensions will need to be recompiled.  Further bina­
       ries built with threads enabled are incompatible with
       binaries built without.  This should largely be transpar­
       ent to the user, as all binary incompatible configurations
       have their own unique architecture name, and extension
       binaries get installed at unique locations.  This allows
       coexistence of several configurations in the same direc­
       tory hierarchy.  See INSTALL.

       SSeeccuurriittyy ffiixxeess mmaayy aaffffeecctt ccoommppaattiibbiilliittyy

       A few taint leaks and taint omissions have been corrected.
       This may lead to "failure" of scripts that used to work
       with older versions.  Compiling with -DINCOMPLETE_TAINTS
       provides a perl with minimal amounts of changes to the
       tainting behavior.  But note that the resulting perl will
       have known insecurities.

       Oneliners with the "-e" switch do not create temporary
       files anymore.

       RReellaaxxeedd nneeww mmaannddaattoorryy wwaarrnniinnggss iinnttrroodduucceedd iinn 55..000044

       Many new warnings that were introduced in 5.004 have been
       made optional.  Some of these warnings are still present,
       but perl's new features make them less often a problem.
       See the New Diagnostics entry elsewhere in this document.

       LLiicceennssiinngg

       Perl has a new Social Contract for contributors.  See
       Porting/Contract.

       The license included in much of the Perl documentation has
       changed.  Most of the Perl documentation was previously
       under the implicit GNU General Public License or the
       Artistic License (at the user's choice).  Now much of the
       documentation unambiguously states the terms under which
       it may be distributed.  Those terms are in general much
       less restrictive than the GNU GPL.  See the perl manpage
       and the individual perl man pages listed therein.

CCoorree CChhaannggeess
       TThhrreeaaddss

       WARNING: Threading is considered an eexxppeerriimmeennttaall feature.
       Details of the implementation may change without notice.
       There are known limitations and some bugs.  These are
       expected to be fixed in future versions.

       See README.threads.

       CCoommppiilleerr

       WARNING: The Compiler and related tools are considered
       eexxppeerriimmeennttaall.  Features may change without notice, and
       there are known limitations and bugs.  Since the compiler
       is fully external to perl, the default configuration will
       build and install it.

       The Compiler produces three different types of transforma­
       tions of a perl program.  The C backend generates C code
       that captures perl's state just before execution begins.
       It eliminates the compile-time overheads of the regular
       perl interpreter, but the run-time performance remains
       comparatively the same.  The CC backend generates opti­
       mized C code equivalent to the code path at run-time.  The
       CC backend has greater potential for big optimizations,
       but only a few optimizations are implemented currently.
       The Bytecode backend generates a platform independent
       bytecode representation of the interpreter's state just
       before execution.  Thus, the Bytecode back end also elimi­
       nates much of the compilation overhead of the interpreter.

       The compiler comes with several valuable utilities.

       "B::Lint" is an experimental module to detect and warn
       about suspicious code, especially the cases that the "-w"
       switch does not detect.

       "B::Deparse" can be used to demystify perl code, and
       understand how perl optimizes certain constructs.

       "B::Xref" generates cross reference reports of all defini­
       tion and use of variables, subroutines and formats in a
       program.

       "B::Showlex" show the lexical variables used by a subrou­
       tine or file at a glance.

       "perlcc" is a simple frontend for compiling perl.

       See "ext/B/README", the B manpage, and the respective com­
       piler modules.

       RReegguullaarr EExxpprreessssiioonnss

       Perl's regular expression engine has been seriously over­
       hauled, and many new constructs are supported.  Several
       bugs have been fixed.

       Here is an itemized summary:

       Many new and improved optimizations
           Changes in the RE engine:

                   Unneeded nodes removed;
                   Substrings merged together;
                   New types of nodes to process (SUBEXPR)* and similar expressions
                       quickly, used if the SUBEXPR has no side effects and matches
                       strings of the same length;
                   Better optimizations by lookup for constant substrings;
                   Better search for constants substrings anchored by $ ;

           Changes in Perl code using RE engine:

                   More optimizations to s/longer/short/;
                   study() was not working;
                   /blah/ may be optimized to an analogue of index() if $& $` $' not seen;
                   Unneeded copying of matched-against string removed;
                   Only matched part of the string is copying if $` $' were not seen;


       Many bug fixes
           Note that only the major bug fixes are listed here.
           See Changes for others.

                   Backtracking might not restore start of $3.
                   No feedback if max count for * or + on "complex" subexpression
                       was reached, similarly (but at compile time) for {3,34567}
                   Primitive restrictions on max count introduced to decrease a
                       possibility of a segfault;
                   (ZERO-LENGTH)* could segfault;
                   (ZERO-LENGTH)* was prohibited;
                   Long REs were not allowed;
                   /RE/g could skip matches at the same position after a
                     zero-length match;




       New regular expression constructs
           The following new syntax elements are supported:

                   (?<=RE)
                   (?<!RE)
                   (?{ CODE })
                   (?i-x)
                   (?i:RE)
                   (?(COND)YES_RE|NO_RE)
                   (?>RE)
                   \z


       New operator for precompiled regular expressions
           See the section on "/" operator" in the New "qr man­
           page.

       Other improvements
                   Better debugging output (possibly with colors),
                       even from non-debugging Perl;
                   RE engine code now looks like C, not like assembler;
                   Behaviour of RE modifiable by `use re' directive;
                   Improved documentation;
                   Test suite significantly extended;
                   Syntax [:^upper:] etc., reserved inside character classes;


       Incompatible changes
                   (?i) localized inside enclosing group;
                   $( is not interpolated into RE any more;
                   /RE/g may match at the same position (with non-zero length)
                       after a zero-length match (bug fix).


       See the perlre manpage and the perlop manpage.

       IImmpprroovveedd malloc()

       See banner at the beginning of "malloc.c" for details.

       QQuuiicckkssoorrtt iiss iinntteerrnnaallllyy iimmpplleemmeenntteedd

       Perl now contains its own highly optimized qsort() rou­
       tine.  The new qsort() is resistant to inconsistent com­
       parison functions, so Perl's "sort()" will not provoke
       coredumps any more when given poorly written sort subrou­
       tines.  (Some C library "qsort()"s that were being used
       before used to have this problem.)  In our testing, the
       new "qsort()" required the minimal number of pair-wise
       compares on average, among all known "qsort()" implementa­
       tions.

       See "perlfunc/sort".

       RReelliiaabbllee ssiiggnnaallss

       Perl's signal handling is susceptible to random crashes,
       because signals arrive asynchronously, and the Perl run­
       time is not reentrant at arbitrary times.

       However, one experimental implementation of reliable sig­
       nals is available when threads are enabled.  See
       "Thread::Signal".  Also see INSTALL for how to build a
       Perl capable of threads.


       RReelliiaabbllee ssttaacckk ppooiinntteerrss

       The internals now reallocate the perl stack only at pre­
       dictable times.  In particular, magic calls never trigger
       reallocations of the stack, because all reentrancy of the
       runtime is handled using a "stack of stacks".  This should
       improve reliability of cached stack pointers in the inter­
       nals and in XSUBs.

       MMoorree ggeenneerroouuss ttrreeaattmmeenntt ooff ccaarrrriiaaggee rreettuurrnnss

       Perl used to complain if it encountered literal carriage
       returns in scripts.  Now they are mostly treated like
       whitespace within program text.  Inside string literals
       and here documents, literal carriage returns are ignored
       if they occur paired with linefeeds, or get interpreted as
       whitespace if they stand alone.  This behavior means that
       literal carriage returns in files should be avoided.  You
       can get the older, more compatible (but less generous)
       behavior by defining the preprocessor symbol
       "PERL_STRICT_CR" when building perl.  Of course, all this
       has nothing whatever to do with how escapes like "\r" are
       handled within strings.

       Note that this doesn't somehow magically allow you to keep
       all text files in DOS format.  The generous treatment only
       applies to files that perl itself parses.  If your C com­
       piler doesn't allow carriage returns in files, you may
       still be unable to build modules that need a C compiler.

       MMeemmoorryy lleeaakkss

       "substr", "pos" and "vec" don't leak memory anymore when
       used in lvalue context.  Many small leaks that impacted
       applications that embed multiple interpreters have been
       fixed.

       BBeetttteerr ssuuppppoorrtt ffoorr mmuullttiippllee iinntteerrpprreetteerrss

       The build-time option "-DMULTIPLICITY" has had many of the
       details reworked.  Some previously global variables that
       should have been per-interpreter now are.  With care, this
       allows interpreters to call each other.  See the "PerlIn­
       terp" extension on CPAN.

       BBeehhaavviioorr ooff local() oonn aarrrraayy aanndd hhaasshh eelleemmeennttss iiss nnooww
       wweellll--ddeeffiinneedd

       See the Temporary Values via local() entry in the perlsub
       manpage.

       ""%%!!"" iiss ttrraannssppaarreennttllyy ttiieedd ttoo tthhee tthhee EErrrrnnoo mmaannppaaggee mmoodduullee

       See the perlvar manpage, and the Errno manpage.

       PPsseeuuddoo--hhaasshheess aarree ssuuppppoorrtteedd

       See the perlref manpage.

       ""EEXXPPRR ffoorreeaacchh EEXXPPRR"" iiss ssuuppppoorrtteedd

       See the perlsyn manpage.




       KKeeyywwoorrddss ccaann bbee gglloobbaallllyy oovveerrrriiddddeenn

       See the perlsub manpage.

       ""$$^^EE"" iiss mmeeaanniinnggffuull oonn WWiinn3322

       See the perlvar manpage.

       ""ffoorreeaacchh ((11....11000000000000))"" ooppttiimmiizzeedd

       "foreach (1..1000000)" is now optimized into a counting
       loop.  It does not try to allocate a 1000000-size list
       anymore.

       ""FFoooo::::"" ccaann bbee uusseedd aass iimmpplliicciittllyy qquuootteedd ppaacckkaaggee nnaammee

       Barewords caused unintuitive behavior when a subroutine
       with the same name as a package happened to be defined.
       Thus, "new Foo @args", use the result of the call to
       "Foo()" instead of "Foo" being treated as a literal.  The
       recommended way to write barewords in the indirect object
       slot is "new Foo:: @args".  Note that the method "new()"
       is called with a first argument of "Foo", not "Foo::" when
       you do that.

       ""eexxiissttss $$FFoooo::::{{BBaarr::::}}"" tteessttss eexxiisstteennccee ooff aa ppaacckkaaggee

       It was impossible to test for the existence of a package
       without actually creating it before.  Now "exists
       $Foo::{Bar::}" can be used to test if the "Foo::Bar"
       namespace has been created.

       BBeetttteerr llooccaallee ssuuppppoorrtt

       See the perllocale manpage.

       EExxppeerriimmeennttaall ssuuppppoorrtt ffoorr 6644--bbiitt ppllaattffoorrmmss

       Perl5 has always had 64-bit support on systems with 64-bit
       longs.  Starting with 5.005, the beginnings of experimen­
       tal support for systems with 32-bit long and 64-bit 'long
       long' integers has been added.  If you add -DUSE_LONG_LONG
       to your ccflags in config.sh (or manually define it in
       perl.h) then perl will be built with 'long long' support.
       There will be many compiler warnings, and the resultant
       perl may not work on all systems.  There are many other
       issues related to third-party extensions and libraries.
       This option exists to allow people to work on those
       issues.

       prototype() rreettuurrnnss uusseeffuull rreessuullttss oonn bbuuiillttiinnss

       See the prototype entry in the perlfunc manpage.

       EExxtteennddeedd ssuuppppoorrtt ffoorr eexxcceeppttiioonn hhaannddlliinngg

       "die()" now accepts a reference value, and "$@" gets set
       to that value in exception traps.  This makes it possible
       to propagate exception objects.  This is an undocumented
       eexxppeerriimmeennttaall feature.

       RRee--bblleessssiinngg iinn DESTROY() ssuuppppoorrtteedd ffoorr cchhaaiinniinngg DESTROY()
       mmeetthhooddss

       See the Destructors entry in the perlobj manpage.

       AAllll ""pprriinnttff"" ffoorrmmaatt ccoonnvveerrssiioonnss aarree hhaannddlleedd iinntteerrnnaallllyy

       See the printf entry in the perlfunc manpage.

       NNeeww ""IINNIITT"" kkeeyywwoorrdd

       "INIT" subs are like "BEGIN" and "END", but they get run
       just before the perl runtime begins execution.  e.g., the
       Perl Compiler makes use of "INIT" blocks to initialize and
       resolve pointers to XSUBs.

       NNeeww ""lloocckk"" kkeeyywwoorrdd

       The "lock" keyword is the fundamental synchronization
       primitive in threaded perl.  When threads are not enabled,
       it is currently a noop.

       To minimize impact on source compatibility this keyword is
       "weak", i.e., any user-defined subroutine of the same name
       overrides it, unless a "use Thread" has been seen.

       NNeeww ""qqrr////"" ooppeerraattoorr

       The "qr//" operator, which is syntactically similar to the
       other quote-like operators, is used to create precompiled
       regular expressions.  This compiled form can now be
       explicitly passed around in variables, and interpolated in
       other regular expressions.  See the perlop manpage.

       ""oouurr"" iiss nnooww aa rreesseerrvveedd wwoorrdd

       Calling a subroutine with the name "our" will now provoke
       a warning when using the "-w" switch.

       TTiieedd aarrrraayyss aarree nnooww ffuullllyy ssuuppppoorrtteedd

       See the Tie::Array manpage.

       TTiieedd hhaannddlleess ssuuppppoorrtt iiss bbeetttteerr

       Several missing hooks have been added.  There is also a
       new base class for TIEARRAY implementations.  See the
       Tie::Array manpage.

       44tthh aarrgguummeenntt ttoo ssuubbssttrr

       substr() can now both return and replace in one operation.
       The optional 4th argument is the replacement string.  See
       the substr entry in the perlfunc manpage.

       NNeeggaattiivvee LLEENNGGTTHH aarrgguummeenntt ttoo sspplliiccee

       splice() with a negative LENGTH argument now work similar
       to what the LENGTH did for substr().  Previously a nega­
       tive LENGTH was treated as 0.  See the splice entry in the
       perlfunc manpage.

       MMaaggiicc llvvaalluueess aarree nnooww mmoorree mmaaggiiccaall

       When you say something like "substr($x, 5) = "hi"", the
       scalar returned by substr() is special, in that any modi­
       fications to it affect $x.  (This is called a 'magic
       lvalue' because an 'lvalue' is something on the left side
       of an assignment.)  Normally, this is exactly what you
       would expect to happen, but Perl uses the same magic if
       you use substr(), pos(), or vec() in a context where they
       might be modified, like taking a reference with "\" or as
       an argument to a sub that modifies "@_".  In previous ver­
       sions, this 'magic' only went one way, but now changes to
       the scalar the magic refers to ($x in the above example)
       affect the magic lvalue too. For instance, this code now
       acts differently:

           $x = "hello";
           sub printit {
               $x = "g'bye";
               print $_[0], "\n";
           }
           printit(substr($x, 0, 5));

       In previous versions, this would print "hello", but it now
       prints "g'bye".

       <<>> nnooww rreeaaddss iinn rreeccoorrddss

       If "$/" is a reference to an integer, or a scalar that
       holds an integer, <> will read in records instead of
       lines. For more info, see the section on "$/" in the perl­
       var manpage.

SSuuppppoorrtteedd PPllaattffoorrmmss
       Configure has many incremental improvements.  Site-wide
       policy for building perl can now be made persistent, via
       Policy.sh.  Configure also records the command-line argu­
       ments used in config.sh.

       NNeeww PPllaattffoorrmmss

       BeOS is now supported.  See README.beos.

       DOS is now supported under the DJGPP tools.  See
       README.dos (installed as the perldos manpage on some sys­
       tems).

       MiNT is now supported.  See README.mint.

       MPE/iX is now supported.  See README.mpeix.

       MVS (aka OS390, aka Open Edition) is now supported.  See
       README.os390 (installed as the perlos390 manpage on some
       systems).

       Stratus VOS is now supported.  See README.vos.

       CChhaannggeess iinn eexxiissttiinngg ssuuppppoorrtt

       Win32 support has been vastly enhanced.  Support for Perl
       Object, a C++ encapsulation of Perl.  GCC and EGCS are now
       supported on Win32.  See README.win32, aka the perlwin32
       manpage.

       VMS configuration system has been rewritten.  See
       README.vms (installed as the README_vms manpage on some
       systems).

       The hints files for most Unix platforms have seen incre­
       mental improvements.

MMoodduulleess aanndd PPrraaggmmaattaa



       NNeeww MMoodduulleess


       B   Perl compiler and tools.  See the B manpage.

       Data::Dumper
           A module to pretty print Perl data.  See the
           Data::Dumper manpage.

       Dumpvalue
           A module to dump perl values to the screen. See the
           Dumpvalue manpage.

       Errno
           A module to look up errors more conveniently.  See the
           Errno manpage.

       File::Spec
           A portable API for file operations.

       ExtUtils::Installed
           Query and manage installed modules.

       ExtUtils::Packlist
           Manipulate .packlist files.

       Fatal
           Make functions/builtins succeed or die.

       IPC::SysV
           Constants and other support infrastructure for System
           V IPC operations in perl.

       Test
           A framework for writing testsuites.

       Tie::Array
           Base class for tied arrays.

       Tie::Handle
           Base class for tied handles.

       Thread
           Perl thread creation, manipulation, and support.

       attrs
           Set subroutine attributes.

       fields
           Compile-time class fields.

       re  Various pragmata to control behavior of regular
           expressions.

       CChhaannggeess iinn eexxiissttiinngg mmoodduulleess


       Benchmark
           You can now run tests for x seconds instead of guess­
           ing the right number of tests to run.

           Keeps better time.

       Carp
           Carp has a new function cluck(). cluck() warns, like
           carp(), but also adds a stack backtrace to the error
           message, like confess().

       CGI CGI has been updated to version 2.42.

       Fcntl
           More Fcntl constants added: F_SETLK64, F_SETLKW64,
           O_LARGEFILE for large (more than 4G) file access (the
           64-bit support is not yet working, though, so no need
           to get overly excited), Free/Net/OpenBSD locking
           behaviour flags F_FLOCK, F_POSIX, Linux F_SHLCK, and
           O_ACCMODE: the mask of O_RDONLY, O_WRONLY, and O_RDWR.

       Math::Complex
           The accessors methods Re, Im, arg, abs, rho, theta,
           methods can ($z->Re()) now also act as mutators
           ($z->Re(3)).

       Math::Trig
           A little bit of radial trigonometry (cylindrical and
           spherical) added, for example the great circle dis­
           tance.

       POSIX
           POSIX now has its own platform-specific hints files.

       DB_File
           DB_File supports version 2.x of Berkeley DB.  See
           "ext/DB_File/Changes".

       MakeMaker
           MakeMaker now supports writing empty makefiles, pro­
           vides a way to specify that site umask() policy should
           be honored.  There is also better support for manipu­
           lation of .packlist files, and getting information
           about installed modules.

           Extensions that have both architecture-dependent and
           architecture-independent files are now always
           installed completely in the architecture-dependent
           locations.  Previously, the shareable parts were
           shared both across architectures and across perl ver­
           sions and were therefore liable to be overwritten with
           newer versions that might have subtle incompatibili­
           ties.

       CPAN
           See <perlmodinstall> and the CPAN manpage.

       Cwd Cwd::cwd is faster on most platforms.

UUttiilliittyy CChhaannggeess
       "h2ph" and related utilities have been vastly overhauled.

       "perlcc", a new experimental front end for the compiler is
       available.

       The crude GNU "configure" emulator is now called "config­
       ure.gnu" to avoid trampling on "Configure" under case-
       insensitive filesystems.

       "perldoc" used to be rather slow.  The slower features are
       now optional.  In particular, case-insensitive searches
       need the "-i" switch, and recursive searches need "-r".
       You can set these switches in the "PERLDOC" environment
       variable to get the old behavior.

DDooccuummeennttaattiioonn CChhaannggeess
       Config.pm now has a glossary of variables.

       Porting/patching.pod has detailed instructions on how to
       create and submit patches for perl.

       the perlport manpage specifies guidelines on how to write
       portably.

       the perlmodinstall manpage describes how to fetch and
       install modules from "CPAN" sites.

       Some more Perl traps are documented now.  See the perltrap
       manpage.

       the perlopentut manpage gives a tutorial on using open().

       the perlreftut manpage gives a tutorial on references.

       the perlthrtut manpage gives a tutorial on threads.

NNeeww DDiiaaggnnoossttiiccss
       Ambiguous call resolved as CORE::%s(), qualify as such or
       use &
           (W) A subroutine you have declared has the same name
           as a Perl keyword, and you have used the name without
           qualification for calling one or the other.  Perl
           decided to call the builtin because the subroutine is
           not imported.

           To force interpretation as a subroutine call, either
           put an ampersand before the subroutine name, or qual­
           ify the name with its package.  Alternatively, you can
           import the subroutine (or pretend that it's imported
           with the "use subs" pragma).

           To silently interpret it as the Perl operator, use the
           "CORE::" prefix on the operator (e.g. "CORE::log($x)")
           or by declaring the subroutine to be an object method
           (see the attrs manpage).

       Bad index while coercing array into hash
           (F) The index looked up in the hash found as the 0'th
           element of a pseudo-hash is not legal.  Index values
           must be at 1 or greater.  See the perlref manpage.

       Bareword ""%s"" refers to nonexistent package
           (W) You used a qualified bareword of the form "Foo::",
           but the compiler saw no other uses of that namespace
           before that point.  Perhaps you need to predeclare a
           package?

       Can't call method ""%s"" on an undefined value
           (F) You used the syntax of a method call, but the slot
           filled by the object reference or package name con­
           tains an undefined value.  Something like this will
           reproduce the error:

               $BADREF = 42;
               process $BADREF 1,2,3;
               $BADREF->process(1,2,3);


       Can't check filesystem of script ""%s"" for nosuid
           (P) For some reason you can't check the filesystem of
           the script for nosuid.

       Can't coerce array into hash
           (F) You used an array where a hash was expected, but
           the array has no information on how to map from keys
           to array indices.  You can do that only with arrays
           that have a hash reference at index 0.

       Can't goto subroutine from an eval-string
           (F) The "goto subroutine" call can't be used to jump
           out of an eval "string".  (You can use it to jump out
           of an eval {BLOCK}, but you probably don't want to.)

       Can't localize pseudo-hash element
           (F) You said something like "local $ar->{'key'}",
           where $ar is a reference to a pseudo-hash.  That
           hasn't been implemented yet, but you can get a similar
           effect by localizing the corresponding array element
           directly -- "local $ar->[$ar->[0]{'key'}]".

       Can't use %%! because Errno.pm is not available
           (F) The first time the %! hash is used, perl automati­
           cally loads the Errno.pm module. The Errno module is
           expected to tie the %! hash to provide symbolic names
           for "$!" errno values.

       Cannot find an opnumber for ""%s""
           (F) A string of a form "CORE::word" was given to pro­
           totype(), but there is no builtin with the name
           "word".

       Character class syntax [. .] is reserved for future exten­
       sions
           (W) Within regular expression character classes ([])
           the syntax beginning with "[." and ending with ".]" is
           reserved for future extensions.  If you need to repre­
           sent those character sequences inside a regular
           expression character class, just quote the square
           brackets with the backslash: "\[." and ".\]".

       Character class syntax [: :] is reserved for future exten­
       sions
           (W) Within regular expression character classes ([])
           the syntax beginning with "[:" and ending with ":]" is
           reserved for future extensions.  If you need to repre­
           sent those character sequences inside a regular
           expression character class, just quote the square
           brackets with the backslash: "\[:" and ":\]".

       Character class syntax [= =] is reserved for future exten­
       sions
           (W) Within regular expression character classes ([])
           the syntax beginning with "[=" and ending with "=]" is
           reserved for future extensions.  If you need to repre­
           sent those character sequences inside a regular
           expression character class, just quote the square
           brackets with the backslash: "\[=" and "=\]".

       %s: Eval-group in insecure regular expression
           (F) Perl detected tainted data when trying to compile
           a regular expression that contains the "(?{ ... })"
           zero-width assertion, which is unsafe.  See the sec­
           tion on "(?{ code })" in the perlre manpage, and the
           perlsec manpage.



       %s: Eval-group not allowed, use re 'eval'
           (F) A regular expression contained the "(?{ ... })"
           zero-width assertion, but that construct is only
           allowed when the "use re 'eval'" pragma is in effect.
           See the section on "(?{ code })" in the perlre man­
           page.

       %s: Eval-group not allowed at run time
           (F) Perl tried to compile a regular expression con­
           taining the "(?{ ... })" zero-width assertion at run
           time, as it would when the pattern contains interpo­
           lated values.  Since that is a security risk, it is
           not allowed.  If you insist, you may still do this by
           explicitly building the pattern from an interpolated
           string at run time and using that in an eval().  See
           the section on "(?{ code })" in the perlre manpage.

       Explicit blessing to '' (assuming package main)
           (W) You are blessing a reference to a zero length
           string.  This has the effect of blessing the reference
           into the package main.  This is usually not what you
           want.  Consider providing a default target package,
           e.g. bless($ref, $p || 'MyPackage');

       Illegal hex digit ignored
           (W) You may have tried to use a character other than 0
           - 9 or A - F in a hexadecimal number.  Interpretation
           of the hexadecimal number stopped before the illegal
           character.

       No such array field
           (F) You tried to access an array as a hash, but the
           field name used is not defined.  The hash at index 0
           should map all valid field names to array indices for
           that to work.

       No such field ""%s"" in variable %s of type %s
           (F) You tried to access a field of a typed variable
           where the type does not know about the field name.
           The field names are looked up in the %FIELDS hash in
           the type package at compile time.  The %FIELDS hash is
           usually set up with the 'fields' pragma.

       Out of memory during ridiculously large request
           (F) You can't allocate more than 2^31+"small amount"
           bytes.  This error is most likely to be caused by a
           typo in the Perl program. e.g., "$arr[time]" instead
           of "$arr[$time]".

       Range iterator outside integer range
           (F) One (or both) of the numeric arguments to the
           range operator ".."  are outside the range which can
           be represented by integers internally.  One possible
           workaround is to force Perl to use magical string
           increment by prepending "0" to your numbers.

       Recursive inheritance detected while looking for method
       '%s' %s
           (F) More than 100 levels of inheritance were encoun­
           tered while invoking a method.  Probably indicates an
           unintended loop in your inheritance hierarchy.

       Reference found where even-sized list expected
           (W) You gave a single reference where Perl was expect­
           ing a list with an even number of elements (for
           assignment to a hash). This usually means that you
           used the anon hash constructor when you meant to use
           parens. In any case, a hash requires key/value ppaaiirrss.

               %hash = { one => 1, two => 2, };   # WRONG
               %hash = [ qw/ an anon array / ];   # WRONG
               %hash = ( one => 1, two => 2, );   # right
               %hash = qw( one 1 two 2 );                 # also fine


       Undefined value assigned to typeglob
           (W) An undefined value was assigned to a typeglob, a
           la "*foo = undef".  This does nothing.  It's possible
           that you really mean "undef *foo".

       Use of reserved word ""%s"" is deprecated
           (D) The indicated bareword is a reserved word.  Future
           versions of perl may use it as a keyword, so you're
           better off either explicitly quoting the word in a
           manner appropriate for its context of use, or using a
           different name altogether.  The warning can be sup­
           pressed for subroutine names by either adding a "&"
           prefix, or using a package qualifier, e.g. "&our()",
           or "Foo::our()".

       perl: warning: Setting locale failed.
           (S) The whole warning message will look something
           like:

                  perl: warning: Setting locale failed.
                  perl: warning: Please check that your locale settings:
                          LC_ALL = "En_US",
                          LANG = (unset)
                      are supported and installed on your system.
                  perl: warning: Falling back to the standard locale ("C").

           Exactly what were the failed locale settings varies.
           In the above the settings were that the LC_ALL was
           "En_US" and the LANG had no value.  This error means
           that Perl detected that you and/or your system admin­
           istrator have set up the so-called variable system but
           Perl could not use those settings.  This was not dead
           serious, fortunately: there is a "default locale"
           called "C" that Perl can and will use, the script will
           be run.  Before you really fix the problem, however,
           you will get the same error message each time you run
           Perl.  How to really fix the problem can be found in
           the LOCALE PROBLEMS entry in the perllocale manpage.

OObbssoolleettee DDiiaaggnnoossttiiccss
       Can't mktemp()
           (F) The mktemp() routine failed for some reason while
           trying to process a --ee switch.  Maybe your /tmp parti­
           tion is full, or clobbered.

           Removed because --ee doesn't use temporary files any
           more.

       Can't write to temp file for --ee: %s
           (F) The write routine failed for some reason while
           trying to process a --ee switch.  Maybe your /tmp parti­
           tion is full, or clobbered.

           Removed because --ee doesn't use temporary files any
           more.


       Cannot open temporary file
           (F) The create routine failed for some reason while
           trying to process a --ee switch.  Maybe your /tmp parti­
           tion is full, or clobbered.

           Removed because --ee doesn't use temporary files any
           more.

       regexp too big
           (F) The current implementation of regular expressions
           uses shorts as address offsets within a string.
           Unfortunately this means that if the regular expres­
           sion compiles to longer than 32767, it'll blow up.
           Usually when you want a regular expression this big,
           there is a better way to do it with multiple state­
           ments.  See the perlre manpage.

CCoonnffiigguurraattiioonn CChhaannggeess
       You can use "Configure -Uinstallusrbinperl" which causes
       installperl to skip installing perl also as /usr/bin/perl.
       This is useful if you prefer not to modify /usr/bin for
       some reason or another but harmful because many scripts
       assume to find Perl in /usr/bin/perl.

BBUUGGSS
       If you find what you think is a bug, you might check the
       headers of recently posted articles in the
       comp.lang.perl.misc newsgroup.  There may also be informa­
       tion at http://www.perl.com/perl/, the Perl Home Page.

       If you believe you have an unreported bug, please run the
       ppeerrllbbuugg program included with your release.  Make sure you
       trim your bug down to a tiny but sufficient test case.
       Your bug report, along with the output of "perl -V", will
       be sent off to <perlbug@perl.com> to be analysed by the
       Perl porting team.

SSEEEE AALLSSOO
       The Changes file for exhaustive details on what changed.

       The INSTALL file for how to build Perl.

       The README file for general stuff.

       The Artistic and Copying files for copyright information.

HHIISSTTOORRYY
       Written by Gurusamy Sarathy <gsar@activestate.com>, with
       many contributions from The Perl Porters.

       Send omissions or corrections to <perlbug@perl.com>.



2001-04-08                 perl v5.6.1           PERL5005DELTA(1)
