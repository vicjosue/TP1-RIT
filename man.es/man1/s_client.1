S_CLIENT(1)                  OpenSSL                  S_CLIENT(1)



NNAAMMEE
       s_client - SSL/TLS client program

SSYYNNOOPPSSIISS
       ooppeennssssll ss_cclliieenntt [--ccoonnnneecctt host:port>] [--vveerriiffyy ddeepptthh]
       [--cceerrtt ffiilleennaammee] [--kkeeyy ffiilleennaammee] [--CCAAppaatthh ddiirreeccttoorryy]
       [--CCAAffiillee ffiilleennaammee] [--rreeccoonnnneecctt] [--ppaauussee] [--sshhoowwcceerrttss]
       [--ddeebbuugg] [--nnbbiioo_tteesstt] [--ssttaattee] [--nnbbiioo] [--ccrrllff] [--iiggnn_eeooff]
       [--qquuiieett] [--ssssll22] [--ssssll33] [--ttllss11] [--nnoo_ssssll22] [--nnoo_ssssll33]
       [--nnoo_ttllss11] [--bbuuggss] [--cciipphheerr cciipphheerrlliisstt] [--rraanndd ffiillee((ss))]

DDEESSCCRRIIPPTTIIOONN
       The ss_cclliieenntt command implements a generic SSL/TLS client
       which connects to a remote host using SSL/TLS. It is a
       very useful diagnostic tool for SSL servers.

OOPPTTIIOONNSS
       --ccoonnnneecctt hhoosstt::ppoorrtt
           This specifies the host and optional port to connect
           to. If not specified then an attempt is made to
           connect to the local host on port 4433.

       --cceerrtt cceerrttnnaammee
           The certificate to use, if one is requested by the
           server. The default is not to use a certificate.

       --kkeeyy kkeeyyffiillee
           The private key to use. If not specified then the
           certificate file will be used.

       --vveerriiffyy ddeepptthh
           The verify depth to use. This specifies the maximum
           length of the server certificate chain and turns on
           server certificate verification.  Currently the verify
           operation continues after errors so all the problems
           with a certificate chain can be seen. As a side effect
           the connection will never fail due to a server
           certificate verify failure.

       --CCAAppaatthh ddiirreeccttoorryy
           The directory to use for server certificate
           verification. This directory must be in "hash format",
           see vveerriiffyy for more information. These are also used
           when building the client certificate chain.

       --CCAAffiillee ffiillee
           A file containing trusted certificates to use during
           server authentication and to use when attempting to
           build the client certificate chain.

       --rreeccoonnnneecctt
           reconnects to the same server 5 times using the same
           session ID, this can be used as a test that session
           caching is working.

       --ppaauussee
           pauses 1 second between each read and write call.

       --sshhoowwcceerrttss
           display the whole server certificate chain: normally
           only the server certificate itself is displayed.


       --pprreexxiitt
           print session information when the program exits. This
           will always attempt to print out information even if
           the connection fails. Normally information will only
           be printed out once if the connection succeeds. This
           option is useful because the cipher in use may be
           renegotiated or the connection may fail because a
           client certificate is required or is requested only
           after an attempt is made to access a certain URL.
           Note: the output produced by this option is not always
           accurate because a connection might never have been
           established.

       --ssttaattee
           prints out the SSL session states.

       --ddeebbuugg
           print extensive debugging information including a hex
           dump of all traffic.

       --nnbbiioo_tteesstt
           tests non-blocking I/O

       --nnbbiioo
           turns on non-blocking I/O

       --ccrrllff
           this option translated a line feed from the terminal
           into CR+LF as required by some servers.

       --iiggnn_eeooff
           inhibit shutting down the connection when end of file
           is reached in the input.

       --qquuiieett
           inhibit printing of session and certificate
           information.  This implicitely turns on --iiggnn_eeooff as
           well.

       --ssssll22, --ssssll33, --ttllss11, --nnoo_ssssll22, --nnoo_ssssll33, --nnoo_ttllss11
           these options disable the use of certain SSL or TLS
           protocols. By default the initial handshake uses a
           method which should be compatible with all servers and
           permit them to use SSL v3, SSL v2 or TLS as
           appropriate.

           Unfortunately there are a lot of ancient and broken
           servers in use which cannot handle this technique and
           will fail to connect. Some servers only work if TLS is
           turned off with the --nnoo_ttllss option others will only
           support SSL v2 and may need the --ssssll22 option.

       --bbuuggss
           there are several known bug in SSL and TLS
           implementations. Adding this option enables various
           workarounds.

       --cciipphheerr cciipphheerrlliisstt
           this allows the cipher list sent by the client to be
           modified. Although the server determines which cipher
           suite is used it should take the first supported
           cipher in the list sent by the client. See the cciipphheerrss
           command for more information.



       --rraanndd ffiillee((ss))
           a file or files containing random data used to seed
           the random number generator, or an EGD socket (see
           RAND_egd(3)).  Multiple files can be specified
           separated by a OS-dependent character.  The separator
           is ;; for MS-Windows, ,, for OpenVMS, and :: for all
           others.

CCOONNNNEECCTTEEDD CCOOMMMMAANNDDSS
       If a connection is established with an SSL server then any
       data received from the server is displayed and any key
       presses will be sent to the server. When used
       interactively (which means neither --qquuiieett nor --iiggnn_eeooff
       have been given), the session will be renegociated if the
       line begins with an RR, and if the line begins with a QQ or
       if end of file is reached, the connection will be closed
       down.

NNOOTTEESS
       ss_cclliieenntt can be used to debug SSL servers. To connect to
       an SSL HTTP server the command:

        openssl s_client -connect servername:443

       would typically be used (https uses port 443). If the
       connection succeeds then an HTTP command can be given such
       as "GET /" to retrieve a web page.

       If the handshake fails then there are several possible
       causes, if it is nothing obvious like no client
       certificate then the --bbuuggss, --ssssll22, --ssssll33, --ttllss11, --nnoo_ssssll22,
       --nnoo_ssssll33, --nnoo_ttllss11 can be tried in case it is a buggy
       server. In particular you should play with these options
       bbeeffoorree submitting a bug report to an OpenSSL mailing list.

       A frequent problem when attempting to get client
       certificates working is that a web client complains it has
       no certificates or gives an empty list to choose from.
       This is normally because the server is not sending the
       clients certificate authority in its "acceptable CA list"
       when it requests a certificate. By using ss_cclliieenntt the CA
       list can be viewed and checked. However some servers only
       request client authentication after a specific URL is
       requested. To obtain the list in this case it is necessary
       to use the --pprreexxiitt command and send an HTTP request for an
       appropriate page.

       If a certificate is specified on the command line using
       the --cceerrtt option it will not be used unless the server
       specifically requests a client certificate. Therefor
       merely including a client certificate on the command line
       is no guarantee that the certificate works.

       If there are problems verifying a server certificate then
       the --sshhoowwcceerrttss option can be used to show the whole chain.

BBUUGGSS
       Because this program has a lot of options and also because
       some of the techniques used are rather old, the C source
       of s_client is rather hard to read and not a model of how
       things should be done. A typical SSL client program would
       be much simpler.

       The --vveerriiffyy option should really exit if the server
       verification fails.

       The --pprreexxiitt option is a bit of a hack. We should really
       report information whenever a session is renegotiated.

SSEEEE AALLSSOO
       sess_id(1), s_server(1), ciphers(1)


































15/Feb/2001                   0.9.6c                  S_CLIENT(1)
